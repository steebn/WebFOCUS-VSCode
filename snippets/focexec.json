{  
	"CommentBlock": {
		"scope": "focexec",
		"prefix": "Comment",
		"body": [
			"-********************************************************************************",
			"-* ${1:comment}",
			"-********************************************************************************"
		],
		"description": "Code snippet for a comment block"
	},
	"DEFINE": {
		"scope": "focexec",
		"prefix": "DEFINE",
		"body": [
			"DEFINE FILE ${1:FileName}",
			"$0",
			"END"
		],
		"description": "Code snippet for DEFINE"
	},
	"TABLE": {
		"scope": "focexec",
		"prefix": "TABLE",
		"body": [
			"TABLE FILE ${1:FileName}",
			"$0",
			"END"
		],
		"description": "Code snippet for TABLE"
	},
	"FILEDEF": {
		"scope": "focexec",
		"prefix": "FILEDEF",
		"body": [
			"FILEDEF ${1:ddname} DISK ${2:Path\\Filename}"
		],
		"description": "Code snippet for FILEDEF"
	},
	"FILEDEF/CLEAR": {
		"scope": "focexec",
		"prefix": "FILEDEF/CLEAR",
		"body": [
			"FILEDEF ${1:ddname} CLEAR",
			"FILEDEF ${1:ddname} DISK ${2:Path\\FileName}"
		],
		"description": "Code snippet for FILEDEF"
	},
	"WHENCE": {
		"scope": "focexec",
		"prefix": "WHENCE",
		"body": [
			"WHENCE ${1:fileName} ${2|FOCEXEC,FOCUS,MASTER,ACCESS,FOCSTYLE|}"
		],
		"description": "Identify the file name and location of a procedure, data source, Master File, Access File, or StyleSheet. WebFOCUS searches on the path of the WebFOCUS Reporting Sever and identifies the file using the WHENCE command."
	},

	//Verbs
	"SUM": {
		"scope": "focexec",
		"prefix": "SUM",
		"body": [
			"SUM ${1:field} $0" 
		],
		"description": "The SUM command sums the values of a numeric field."
	},
	"COUNT": {
		"scope": "focexec",
		"prefix": "COUNT",
		"body": [
			"COUNT ${1:field} $0"
		],
		"description": "The COUNT command counts the number of instances that exist for a specified field."
	},
	"PRINT": {
		"scope": "focexec",
		"prefix": "PRINT",
		"body": [
			"PRINT ${1:field} $0"
		],
		"description": "The PRINT command lists the individual values of the fields you specify in your report request. PRINT does not number the items."
	},
	"LIST": {
		"scope": "focexec",
		"prefix": "LIST",
		"body": [
			"LIST ${1:field} $0"
		],
		"description": "The LIST command lists the individual values of the fields you specify in your report request. LIST numbers the items in the report."
	},
	"RANKED": {
		"scope": "focexec",
		"prefix": "RANKED",
		"body": [
			"RANKED${1: AS '${2:name}'}${3: BY ${4|HIGHEST,LOWEST|} ${5:n} }${6:sortfield}${7: AS '${8:name}'}",
			"$0"
		],
		"description": "The LIST command lists the individual values of the fields you specify in your report request. LIST numbers the items in the report."
	},
	"COMPUTE": {
		"scope": "focexec",
		"prefix": "COMPUTE",
		"body": [
			"COMPUTE ${1:virtualFieldName}/${2:format}${3:length} ${4:MISSING ${5|OFF,ON,ON ALL|}} = $0"
		],
		"description": "The LIST command lists the individual values of the fields you specify in your report request. LIST numbers the items in the report."
	},

	//Query Commands
	"? COMBINE": {
		"scope": "focexec",
		"prefix": "wf? COMBINE",
		"body": [
			"? COMBINE ",
			"$0"
		],
		"description": "Displays a list of combined file structures."
	},
	"? DEFINE": {
		"scope": "focexec",
		"prefix": "wf? DEFINE",
		"body": [
			"? DEFINE ${1:Master/Hold Filename}",
			"$0"
		],
		"description": "Displays currently active virtual fields created by the DEFINE command or attribute."
	},
	"? SET EUROFILE": {
		"scope": "focexec",
		"prefix": "wf? SET EUROFILE",
		"body": [
			"? SET EUROFILE ${1:Master/Hold Filename}",
			"$0"
		],
		"description": "Lists fields currently available to you."
	},
	"?F": {
		"scope": "focexec",
		"prefix": "wf?F",
		"body": [
			"?F ${1:Master/Hold Filename}",
			"$0"
		],
		"description": "Lists fields currently available."
	},
	"? FDT": {
		"scope": "focexec",
		"prefix": "wf? FDT",
		"body": [
			"? FDT ${1:Master/Hold Filename}",
			"$0"
		],
		"description": "Displays physical attributes of a FOCUS data source."
	},
	"?FF": {
		"scope": "focexec",
		"prefix": "wf?FF",
		"body": [
			"?FF ${1:Master/Hold Filename}",
			"$0"
		],
		"description": "Lists field names, aliases, and format information for an active Master File."
	},
	"? FILE": {
		"scope": "focexec",
		"prefix": "wf? FILE",
		"body": [
			"? FILE ${1:FOCUS data source}",
			"$0"
		],
		"description": "Displays the number of segment instances in a FOCUS data source and the last time the data sources was changed."
	},
	"? FILEDEF": {
		"scope": "focexec",
		"prefix": "wf? FILEDEF",
		"body": [
			"? FILEDEF ",
			"$0"
		],
		"description": "Displays the current logical names assigned by the FILEDEF command."
	},
	"? HOLD": {
		"scope": "focexec",
		"prefix": "wf? HOLD",
		"body": [
			"? HOLD ${1:Master/Hold Filename}",
			"$0"
		],
		"description": "Displays fields described in a HOLD Master File."
	},
	"? JOIN": {
		"scope": "focexec",
		"prefix": "wf? JOIN",
		"body": [
			"? JOIN ",
			"$0"
		],
		"description": "Displays JOIN structures that exist between data sources."
	},
	"? LANG": {
		"scope": "focexec",
		"prefix": "wf? LANG",
		"body": [
			"? LANG ",
			"$0"
		],
		"description": "Displays information about National Language Support."
	},
	"? MDI": {
		"scope": "focexec",
		"prefix": "wf? MDI",
		"body": [
			"? MDI ",
			"$0"
		],
		"description": "Generates statistics and descriptions for multi-dimensional indexes."
	},
	"? n": {
		"scope": "focexec",
		"prefix": "wf? [focErrorNum]",
		"body": [
			"? ${1:focErrorNum} ",
			"$0"
		],
		"description": "Displays statistics about the focerror code."
	},
	"? PATH": {
		"scope": "focexec",
		"prefix": "wf? PATH",
		"body": [
			"? PATH ",
			"$0"
		],
		"description": "Displays the current search path."
	},
	"? RELEASE": {
		"scope": "focexec",
		"prefix": "wf? RELEASE",
		"body": [
			"? RELEASE ",
			"$0"
		],
		"description": "Displays the release number of your product."
	},
	"? REMOTE": {
		"scope": "focexec",
		"prefix": "wf? REMOTE",
		"body": [
			"? REMOTE ",
			"$0"
		],
		"description": "Displays the values of the remote servers."
	},
	"? SET": {
		"scope": "focexec",
		"prefix": "wf? SET",
		"body": [
			"? SET",
			"$0"
		],
		"description": "Main settable parameters."
	},
	"? SET ALL": {
		"scope": "focexec",
		"prefix": "wf? SET ALL",
		"body": [
			"? SET ALL",
			"$0"
		],
		"description": "ALL Settable parameters."
	},
	"? SET PROMPT": {
		"scope": "focexec",
		"prefix": "wf? SET PROMPT",
		"body": [
			"? SET PROMPT",
			"$0"
		],
		"description": "Parameters Settable from command line."
	},
	"? SET ONTABLE": {
		"scope": "focexec",
		"prefix": "wf? SET ONTABLE",
		"body": [
			"? SET ONTABLE",
			"$0"
		],
		"description": "Parameters Settable ON TABLE."
	},
	"? SET FOCPARM": {
		"scope": "focexec",
		"prefix": "wf? SET FOCPARM",
		"body": [
			"? SET FOCPARM",
			"$0"
		],
		"description": "Parameters Settable from system-wide profile."
	},
	"? SET FOR": {
		"scope": "focexec",
		"prefix": "wf? SET FOR",
		"body": [
			"? SET FOR ${1:parameter name}",
			"$0"
		],
		"description": "Displays where a specific paramter can be set"
	},
	"? SITECODE": {
		"scope": "focexec",
		"prefix": "wf? SITECODE",
		"body": [
			"? SITECODE ",
			"$0"
		],
		"description": "Retrieves the site code of the connected server."
	},
	"? STAT": {
		"scope": "focexec",
		"prefix": "wf? STAT",
		"body": [
			"? STAT ",
			"$0"
		],
		"description": "Displays statistics about the last command executed."
	},
	"? STYLE": {
		"scope": "focexec",
		"prefix": "wf? STYLE",
		"body": [
			"? STYLE ",
			"$0"
		],
		"description": "Displays StyleSheet Parameter Settings"
	},
	"? SU": {
		"scope": "focexec",
		"prefix": "wf? SU",
		"body": [
			"? SU ",
			"$0"
		],
		"description": "Is communication available to the SU machine."
	},
	"? USE": {
		"scope": "focexec",
		"prefix": "wf? USE",
		"body": [
			"? USE ",
			"$0"
		],
		"description": "Displays data sources specified with the USE command."
	},
	"? &": {
		"scope": "focexec",
		"prefix": "wf? &",
		"body": [
			"? & ",
			"$0"
		],
		"description": "Displays values of all variables (including GLOBAL variable."
	},
	"? &&": {
		"scope": "focexec",
		"prefix": "wf? &&",
		"body": [
			"? && ",
			"$0"
		],
		"description": "Displays values of global variables."
	},

	//Dialog Manager Commands
	"-SET &ECHO": {
		"scope": "focexec",
		"prefix": "-SET &ECHO",
		"body": [
			"-SET &ECHO=${1|ALL,NONE,OFF,ON|};",
			"$0"
		],
		"description": "For debugging.  Controls the level of DM execution echoing."
	},

	"-SET &STACK": {
		"scope": "focexec",
		"prefix": "-SET &STACK",
		"body": [
			"-SET &STACK=${1|OFF,ON|};",
			"$0"
		],
		"description": "For debugging.  Enable or disable the FOCSTACK"
	},
	"-SET &VARIABLE": {
		"scope": "focexec",
		"prefix": "-SET &VARIABLE",
		"body": [
			"-SET &${1:VariableName} = ${2:VariableValue};",
			"$0"
		],
		"description": "For setting a user defined variable."
	},
	"-SET &&GLOBALVAR": {
		"scope": "focexec",
		"prefix": "-SET &&GLOBALVAR",
		"body": [
			"-SET &&${1:VariableName} = ${2:VariableValue};",
			"$0"
		],
		"description": "For setting a user defined Global variable."
	},
	"-HTMLFORM BEGIN/END": {
		"scope": "focexec",
		"prefix": "-HTMLFORM",
		"body": [
			"-HTMLFORM BEGIN ${1:NOEVAL}",
			"$0",
			"-HTMLFORM END"
		],
		"description": "For inserting HTML code within a focexec file"
	},
	"-INCLUDE": {
		"scope": "focexec",
		"prefix": "-INCLUDE",
		"body": [
			"-INCLUDE IBFS:${1|/WFC/Repository/,/EDA/EDASERVE/|}",
			"$0"
		],
		"description": "For including an external file into your report"
	},
	"-EXIT": {
		"scope": "focexec",
		"prefix": "-EXIT",
		"body": [
			"-EXIT",
			"$0"
		],
		"description": "-EXIT closes all external files and terminates the procedure. If the procedure was called by another procedure, control returns to the calling procedure."
	},
	"-QUIT": {
		"scope": "focexec",
		"prefix": "-QUIT",
		"body": [
			"-QUIT",
			"$0"
		],
		"description": "-QUIT cancels execution of any stacked commands and causes an immediate exit from the procedure. Control returns directly to the WebFOCUS application regardless of whether the procedure was called by another procedure."
	},
	"-MRNOEDIT": {
		"scope": "focexec",
		"prefix": "-MRNOEDIT",
		"body": [
			"-MRNOEDIT ${1:focexec_code}$0"
		],
		"description": "To instruct Managed Reporting to not process code"
	},
	"-MRNOEDIT BEGIN/END": {
		"scope": "focexec",
		"prefix": "-MRNOEDIT BEGIN/END",
		"body": [
			"-MRNOEDIT BEGIN ${1:focexec_code}$0",
			"-MRNOEDIT END"
		],
		"description": "To instruct Managed Reporting to not process code"
	},

	//SQL Trace
	"SQL TRACE": {
		"scope": "focexec",
		"prefix": "SQL TRACE",
		"body": [
			"-SET &ECHO = ALL;",
			"SET TRACEUSER = ON",
			"SET TRACEOFF = ALL",
			"SET TRACEON = SQLAGGR//CLIENT",
			"SET TRACEON = STMTRACE//CLIENT",
			"SET TRACEON = STMTRACE/2/CLIENT",
			"SET TRACESTAMP = OFF",
			"SET XRETRIEVAL = ${1|OFF,ON|}",
			"$0"
		],
		"description": "Return the SQL code passed to SQL Server"
	},

	//Output Formats
	"AHTML": {
		"scope": "focexec",
		"prefix": "fmt AHTML",
		"body": [
			"ON TABLE ${1|PCHOLD,HOLD|}${2: AS ${3:filename}} FORMAT AHTML",
			"$0"
		],
		"description": "(.htm, .html) Provides customizable options for creating HTML formatted reports that enable users to experience features normally found in Excel workbooks. Suggested Uses: Report Library, Email for display in a web browser."
	},
	"ALPHA": {
		"scope": "focexec",
		"prefix": "fmt ALPHA",
		"body": [
			"ON TABLE ${1|HOLD,PCHOLD|}${2: AS ${3:filename}} FORMAT ALPHA",
			"$0"
		],
		"description": "(.ftm, .txt) Saves scheduled output as fixed-format character data. Suggested Uses: For display in a text document, for further reporting in WebFOCUS, and as a transaction file for modifying a data source."
	},
	"BINARY": {
		"scope": "focexec",
		"prefix": "fmt BINARY",
		"body": [
			"ON TABLE HOLD${1: AS ${2:filename}} FORMAT ALPHA",
			"$0"
		],
		"description": "(.ftm, .txt) Saves scheduled output as fixed-format character data. Suggested Uses: For display in a text document, for further reporting in WebFOCUS, and as a transaction file for modifying a data source."
	},
	"COMMA": {
		"scope": "focexec",
		"prefix": "fmt COMMA",
		"body": [
			"ON TABLE HOLD${1: AS ${2:filename}} FORMAT COMMA",
			"$0"
		],
		"description": "(.csv) Saves scheduled output as a variable-length text file in comma-delimited format with character values enclosed in double quotation marks (\" \"). All blanks within fields are retained. Suggested Uses: For further processing in a database application. This format type can be imported into applications, such as Excel or Lotus."
	},
	"COMT": {
		"scope": "focexec",
		"prefix": "fmt COMT",
		"body": [
			"ON TABLE HOLD${1: AS ${2:filename}} FORMAT COMT",
			"$0"
		],
		"description": "(.csv) Adds titles to a COMMA file. Saves scheduled output as a variable-length text file in comma-delimited format with character values enclosed in double quotation marks (\" \"). All blanks within fields are retained. Suggested Uses: For further processing in a database application. This format type can be imported into applications, such as Excel or Lotus."
	},
	"DFIX": {
		"scope": "focexec",
		"prefix": "fmt DFIX",
		"body": [
			"ON TABLE HOLD${1: AS ${2:filename}} FORMAT DFIX DELIMITER ${3:|} ENCLOSURE ${4:\"} HEADER ${5|YES,NO|}",
			"$0"
		],
		"description": "(.ftm, .txt) Description: Enables you to define any character to act as the delimiter (DELIMITER = your choice of character), include quotation marks around alpha fields (ENCLOSURE = \"), and include column titles (HEADER = YES/NO). Suggested Uses: Use in files that require custom (non-standard) delimiters."
	},
	"DOC": {
		"scope": "focexec",
		"prefix": "fmt DOC",
		"body": [
			"ON TABLE ${1|HOLD,PCHOLD|}${2: AS ${3:filename}} FORMAT DOC",
			"$0"
		],
		"description": "(.txt) Scheduled output opens as a plain-text word processing document. Text can be opened by any word processing application. Retains ASCII form feed characters to correctly display page output. Suggested Uses: Word Processing applications, printing unformatted reports, email, Report Library."
	},
	"EXL07": {
		"scope": "focexec",
		"prefix": "fmt EXL07",
		"body": [
			"ON TABLE ${1|PCHOLD,HOLD|}${2: AS ${3:filename}} FORMAT EXL07",
			"$0"
		],
		"description": "(.xlsx) Scheduled output opens within Excel 2007 or later. Suggested Uses: Email, Report Library"
	},
	"EXL07 FORMULA": {
		"scope": "focexec",
		"prefix": "fmt EXL07 FORMULA",
		"body": [
			"ON TABLE ${1|PCHOLD,HOLD|}${2: AS ${3:filename}} FORMAT EXL07 FORMULA",
			"$0"
		],
		"description": "(.xlsx) Scheduled output opens within Excel 2007 or later. Contains Excel formulas that calculate and display the results of any type of summed information, such as column totals, row totals, and subtotals. Suggested Uses: Email, Report Library"
	},
	"EXL07 TEMPLATE": {
		"scope": "focexec",
		"prefix": "fmt EXL07 TEMPLATE",
		"body": [
			"ON TABLE ${1|PCHOLD,HOLD|}${2: AS ${3:filename}} FORMAT EXL07 TEMPLATE ${4:templateName} SHEETNUMBER {5|1,2,3,4,5,n|}",
			"$0"
		],
		"description": "(.xlsx) Scheduled output opens within Excel 2007 or later. Contains Excel formulas that calculate and display the results of any type of summed information, such as column totals, row totals, and subtotals. Suggested Uses: Email, Report Library. Considerations: The default file extension for the EXL07 TEMPLATE format is .xlsx. If the template used in the procedure is a macro-enabled template, you must manually change the extension to .xlsm, in order for the output file to open correctly."
	},
	"FOCUS": {
		"scope": "focexec",
		"prefix": "fmt FOCUS",
		"body": [
			"ON TABLE HOLD${1: AS ${2:filename}} FORMAT FOCUS INDEX ${3:field} ",
			"$0"
		],
		"description": "FOCUS data sources with SUFFIX = FOCUS consist of 4K database pages."
	},
	"HTML": {
		"scope": "focexec",
		"prefix": "fmt HTML",
		"body": [
			"ON TABLE PCHOLD${1: AS ${2:filename}} FORMAT HTML",
			"$0"
		],
		"description": " (.htm, .html) Supports hyperlinks and other web-based features. Retains StyleSheet formatting."
	},
	"HTMTABLE": {
		"scope": "focexec",
		"prefix": "fmt HTMTABLE",
		"body": [
			"ON TABLE HOLD${2: AS ${3:filename}} FORMAT HTMTABLE",
			"$0"
		],
		"description": "(.htm, .html) To hold an html table for later use in an -HTMLFORM block. Supports hyperlinks and other web-based features. Retains StyleSheet formatting but also allows for the assignment of CSS Classes."
	},
	"PDF": {
		"scope": "focexec",
		"prefix": "fmt PDF",
		"body": [
			"ON TABLE ${1|PCHOLD,HOLD|}${2: AS ${3:filename}} FORMAT PDF",
			"$0"
		],
		"description": "(.pdf) Appearance of the scheduled output is preserved in an electronic document when printed using Adobe Acrobat or distributed to a printer that has an appropriate driver. Retains all relevant StyleSheet formatting. Suggested Uses: Email, printing, Report Library. Considerations: Does not support hyperlinks in email attachments. Recipient must have an Adobe Acrobat application to view."
	},
	"TAB and TABT": {
		"scope": "focexec",
		"prefix": "fmt TAB/TABT",
		"body": [
			"ON TABLE HOLD${1: AS ${2:filename}} FORMAT ${3|TAB,TABT|}",
			"$0"
		],
		"description": "(.tab, .tsv, .txt) Scheduled output opens in tab-delimited format. For TABT, the format includes column headings in the first row. This format is required by certain software packages, such as Microsoft Access. Suggested Uses: Email, Report Library."
	},
	"SQLHYPG": {
		"scope": "focexec",
		"prefix": "fmt SQLHYPG",
		"body": [
			"ON TABLE HOLD${1: AS ${2:filename}} FORMAT SQLHYPG PERSISTENCE PERMANENT TABLENAME ${3:tableName} CONNECTION 'CON1'",
			"$0"
		],
		"description": "(.tab, .tsv, .txt) Scheduled output opens in tab-delimited format. For TABT, the format includes column headings in the first row. This format is required by certain software packages, such as Microsoft Access. Suggested Uses: Email, Report Library."
	},
	"XFOCUS": {
		"scope": "focexec",
		"prefix": "fmt XFOCUS",
		"body": [
			"ON TABLE HOLD${1: AS ${2:filename}} FORMAT XFOCUS INDEX ${3:field} ",
			"$0"
		],
		"description": "XFOCUS data sources with SUFFIX = XFOCUS consist of 16K database pages."
	},
	"XML": {
		"scope": "focexec",
		"prefix": "fmt XML",
		"body": [
			"ON TABLE ${1|PCHOLD,HOLD|}${2: AS ${3:filename}} FORMAT XML",
			"$0"
		],
		"description": "(.tab, .tsv, .txt) Scheduled output opens in tab-delimited format. For TABT, the format includes column headings in the first row. This format is required by certain software packages, such as Microsoft Access. Suggested Uses: Email, Report Library."
    },
	
	//SET and ON TABLE SET
	"SET ACROSSLINE": {
		"scope": "focexec",
		"prefix": "SET ACROSSLINE",
		"body": [
			"${1|SET ACROSSLINE=,ON TABLE SET ACROSSLINE |}${2|ON,OFF,SKIP|}",
			"$0"
		],
		"description": "Controls underlining of column titles on report output.\n\nON: Underlines column titles on report output (Default)\n\n OFF: Replaces the underline with a blank line\n\n SKIP: Specifies no underline and no blank line."
	},
	"SET ACROSSPRT": {
		"scope": "focexec",
		"prefix": "SET ACROSSPRT",
		"body": [
			"${1|SET ACROSSPRT=,ON TABLE SET ACROSSPRT |}${2|NORMAL,COMPRESS|}",
			"$0"
		],
		"description": "Reduces the number of report lines within each sort group when a request uses the PRINT command and an ACROSS phrase\n\n NORMAL: Does not compress report lines. (Default)\n\n COMPRESS: Compresses report lines by promoting data values up within a sort group."
	},
	"SET ACROSSTITLE": {
		"scope": "focexec",
		"prefix": "SET ACROSSTITLE",
		"body": [
			"${1|SET ACROSSTITLE=,ON TABLE SET ACROSSTITLE |}${2|ABOVE,SIDE|}",
			"$0"
		],
		"description": "Position of the ACROSS title\n\n ABOVE: ACROSS title is above ACROSS values (Default)\n\n SIDE: ACROSS title and the ACROSS values on one line."
	},
	"SET ACRSVRBTITL": {
		"scope": "focexec",
		"prefix": "SET ACRSVRBTITL",
		"body": [
			"${1|SET ACRSVRBTITL=,ON TABLE SET ACRSVRBTITL |}${2|HIDEONE,ON,OFF|}",
			"$0"
		],
		"description": "Controls titles for single verb object in ACROSS.\n\n HIDEONE: Suppresses the title when there is only one display field, or there is only one display field and the request contains one or more of the features that add internal matrix columns to the report. (Defult)\n\n ON: Always displays the title even if there is only one display field.\n\n OFF: Suppresses the title when there is only one display field. Displays the title when there is only one display field and the request contains one or more of the features that add internal matrix columns to the report. This is legacy behavior."
	},
	"SET ALL": {
		"scope": "focexec",
		"prefix": "SET ALL",
		"body": [
			"${1|SET ALL=,ON TABLE SET ALL |}${2|ON,OFF,PASS|}",
			"$0"
		],
		"description": "The ALL parameter handles missing segment instances in a report.\n\n OFF: Omits missing segment instances from a report. (Defult)\n\n ON: Includes missing segment instances in a report when fields in the segment are not screened by WHERE or IF criteria in the request. The missing field values are denoted by the NODATA character, set with the NODATA parameter.\n\n PASS: Includes missing segment instances in a report, regardless of WHERE or IF criteria in the request. This option is not supported when MULTIPATH = COMPOUND."
	},
	"SET AREXPEXCEL": {
		"scope": "focexec",
		"prefix": "SET AREXPEXCEL",
		"body": [
			"${1|SET AREXPEXCEL=,ON TABLE SET AREXPEXCEL |}${2|EXL2K,XLSX|}",
			"$0"
		],
		"description": "The EXCEL export format in Active Reports (AHTML)"
	},
	"SET AREXPIRE": {
		"scope": "focexec",
		"prefix": "SET AREXPIRE",
		"body": [
			"${1|SET AREXPIRE=,ON TABLE SET AREXPIRE |}${2|OFF,yymmdd,xxxDAYS|}",
			"$0"
		],
		"description": "The AREXPIRE parameter enables you to set the date when an HTML active report expires and the report output can no longer be displayed.\n\n OFF: No Expiration (Default)\n\n yymmdd: Is the expiration date in the format of year, month, and day. For example, if you want the report to expire on January 1, 2009, use 090101.\n\n xxxDAYS: 'xxx' Is the number of days from the current date that the report expires. Valid values are 1 to 999."
	},
	"SET ARGRAPHENGINE": {
		"scope": "focexec",
		"prefix": "SET ARGRAPHENGINE",
		"body": [
			"${1|SET ARGRAPHENGINE=,ON TABLE SET ARGRAPHENGINE |}${2|DEFAULT,FUSION,FLEX,JSFUSION,JSCHART,FLEXCHART|}",
			"$0"
		],
		"description": "The chart engine used in Active Reports (AHTML)"
	},
	"SET ARPASSWORD": {
		"scope": "focexec",
		"prefix": "SET ARPASSWORD",
		"body": [
			"${1|SET ARPASSWORD=,ON TABLE SET ARPASSWORD |}${2:password}",
			"$0"
		],
		"description": "Set a password that is required to view AHTML (active) report output. Prior to opening the report output, the user is prompted to enter a password to unlock the report.\n\n password: Is any character string up to 32 characters in length."
	},
	"SET ASNAMES": {
		"scope": "focexec",
		"prefix": "SET ASNAMES",
		"body": [
			"${1|SET ASNAMES=,ON TABLE SET ASNAMES |}${2|FOCUS,ON,OFF,MIXED,FLIP|}",
			"$0"
		],
		"description": "controls the FIELDNAME attribute in a HOLD Master File. When an AS phrase is used in a TABLE request, the specified literal is used as a field name in a HOLD file. It also controls how field names are specified for the values of an ACROSS field when a HOLD file is created.\n\n FOCUS: Uses the literal specified in an AS phrase as the field name and controls the way ACROSS fields are named only in HOLD files in FOCUS format. (Default)\n\n ON: Uppercases the literal specified in an AS phrase and propagates it as the field name in the HOLD Master File. Creates names for ACROSS fields that consist of the AS name value concatenated to the beginning of the ACROSS field value and controls the way ACROSS fields are named in HOLD files of any format.\n\n OFF: Does not use the literal specified in an AS phrase as a field name in HOLD files, and does not affect the way ACROSS fields are named.\n\n MIXED: Uses the literal specified in an AS phrase for the field name, retaining the case of the AS name, and creates names for ACROSS fields that consist of the AS name value concatenated to the beginning of the ACROSS field value.\n\n FLIP: Propagates the field names in the original Master File to the alias names in the HOLD Master File and the alias names in the original Master File to the field names in the HOLD Master File.\n\n "
	},
	"SET BYDISPLAY": {
		"scope": "focexec",
		"prefix": "SET BYDISPLAY",
		"body": [
			"${1|SET BYDISPLAY=,ON TABLE SET BYDISPLAY |}${2|OFF,ON,BY,ACROSS,ALL|}",
			"$0"
		],
		"description": "Within a sort group, the sort field value displays only on the first line of the rows or the leftmost column of the columns for its sort group. However, you can display the appropriate BY or ACROSS field on every row or column in a report using the SET BYDISPLAY command. Although SET BYDISPLAY is supported for all output formats, it is especially important for making your report output more usable by Excel, which cannot sort columns properly when they have blank values in some rows.\n\n OFF: Displays a BY field value only on the first line or column of the report output for the sort group and on the first line or column of a page. (Default)\n\n ON or BY: Displays the associated BY field value on every line of report output produced. BY is a synonym for ON\n\n ACROSS: Displays the relevant ACROSS field value on every column of report output produced.\n\n ALL: Displays the relevant BY field value on every line of report output and the relevant ACROSS field value on every column of report output.\n\n "
	},
	"SET CENT-ZERO": {
		"scope": "focexec",
		"prefix": "SET CENT-ZERO",
		"body": [
			"${1|SET CENT-ZERO=,ON TABLE SET CENT-ZERO |}${2|ON,OFF|}",
			"$0"
		],
		"description": "The CENT-ZERO parameter displays a leading zero in decimal-only numbers."
	},
	"SET CSSURL": {
		"scope": "focexec",
		"prefix": "SET CSSURL",
		"body": [
			"${1|SET CSSURL=,ON TABLE SET CSSURL |}'${2:url}'",
			"$0"
		],
		"description": "Links an HTML report to an external cascading style sheet (CSS) file in order to style the report."
	},
	"SET CURRENCY_DISPLAY": {
		"scope": "focexec",
		"prefix": "SET CURRENCY_DISPLAY",
		"body": [
			"SET CURRENCY_DISPLAY=${1|LEFT_FIXED,LEFT_FIXED_SPACE,LEFT_FLOAT,LEFT_FLOAT_SPACE,TRAILING,TRAILING_SPACE|}",
			"$0"
		],
		"description": "Defines the position of the currency symbol relative to a number.\n\n LEFT_FIXED: The currency symbol is left-justified preceding the number.\n\n LEFT_FIXED_SPACE: The currency symbol is left-justified preceding the number, with at least one space between the symbol and the number.\n\n LEFT_FLOAT: The currency symbol precedes the number, with no space between them.\n\n LEFT_FLOAT_SPACE: The currency symbol precedes the number, with one space between them.\n\n TRAILING: The currency symbol follows the number, with no space between them.\n\n TRAILING_SPACE: The currency symbol follows the number, with one space between them."
	},
	"SET DATE_ORDER": {
		"scope": "focexec",
		"prefix": "SET DATE_ORDER",
		"body": [
			"${1|SET DATE_ORDER=,ON TABLE SET DATE_ORDER |}${2|DEFAULT,DMY,MDY,YMD|}",
			"$0"
		],
		"description": "Defines the order of date components for display.\n\n DATE_ORDER overrides the specified date order for all date and date-time displays unless they include a translation display option (T,Tr, t, or tr), in which case the specified order is produced. To limit the scope to a request, use the ON TABLE SET phrase.\n\nTo use these settings with the Dialogue Manager system variables, (for example, &DATE, &TOD, &YMD, &DATEfmt, and &DATXfmt) append the suffix .DATE_LOCALE to the system variable. This allows system variables that are localized to coexist with non-localized system variables."
	},
	"SET DATE_SEPARATOR": {
		"scope": "focexec",
		"prefix": "SET DATE_SEPARATOR",
		"body": [
			"${1|SET DATE_SEPARATOR=,ON TABLE SET DATE_SEPARATOR |}${2|DEFAULT,SLASH,DASH,BLANK,DOT,NONE|}",
			"$0"
		],
		"description": "Defines the separator for date components for display.\n\n DEFAULT: Respects the separator defined by the USAGE format of the field.\n\n SLASH: Uses a slash (/) to separate date components.\n\n DASH: Uses a dash (-) to separate date components.\n\n BLANK: Uses a blank to separate date components.\n\n DOT: Uses a dot (.) to separate date components.\n\n NONE: Does not separate date components."
	},
	"SET DROPBLNKLINE": {
		"scope": "focexec",
		"prefix": "SET DROPBLNKLINE",
		"body": [
			"${1|SET DROPBLNKLINE=,ON TABLE SET DROPBLNKLINE |}${2|OFF,ON,BODY,HEADING,ALL|}",
			"$0"
		],
		"description": "Suppresses blank lines around subtotals, subheadings, and subfootings when formatting a report for output. In addition, certain data lines may be blank and appear as blank lines on the report output. You can eliminate these blank lines from the report output using the SET DROPBLNKLINE=ON command. This setting does not apply to the following output formats: HOLD/PCHOLD/SAVE formats ALPHA, INTERNAL, BINARY, COM, COMT, COMMA, TAB, TABT, FIX, DFIX, all DBMS, VSAM, LOTUS, SYLK, DIF, FOCUS, and XFOCUS.\n\n OFF: Inserts system-generated blank lines as well as empty data lines. (Default)\n\n ON/BODY: Removes system-generated blank lines within the body of the report, for example, before and after subheads. In addition, certain data lines that may be blank and appear as blank lines on the report output will be removed from the output. BODY is a synonym for ON.\n\n HEADING: Removes the blank lines between headings and titles and between the report body and the footing. Works in positioned formats (PDF, PS, DHTML, PPT, PPTX) when a request has a border or backcolor StyleSheet attribute anywhere in the report.\n\n ALL: Provides both the ON and HEADING behaviors"
	},
	"SET EXPANDABLE": {
		"scope": "focexec",
		"prefix": "SET EXPANDABLE",
		"body": [
			"${1|SET EXPANDABLE=,ON TABLE SET EXPANDABLE |}${2|OFF,ON|}",
			"$0"
		],
		"description": "Generates an Accordion Report that expands by column."
	},
	"SET EXPANDBYROW": {
		"scope": "focexec",
		"prefix": "SET EXPANDBYROW",
		"body": [
			"${1|SET EXPANDBYROW=,ON TABLE SET EXPANDBYROW |}${2|OFF,ON,ALL,n|}",
			"$0"
		],
		"description": "Generates an Accordion Report that expands by row.\n\n OFF: Does not create an Accordion Report (Default)\n\n ON: Creates an Accordion Report which initially displays only the highest sort field level. To see rows on lower levels, click the plus sign next to one of the displayed sort field values.\n\n ALL: Creates an Accordion Report in which all sort field levels are initially expanded. To roll up a sort field level, click the minus sign next to one of the sort field values on that level.\n\n n: Creates an Accordion Report in which n sort field levels are initially expanded. To roll up an expanded sort field level, click the minus sign next to one of the sort field values on that level."
	},
	"HOLDATTRS": {
		"scope": "focexec",
		"prefix": "ots",
		"body": [
			"${1|SET HOLDATTRS=,ON TABLE SET HOLDATTRS |}${2|FOCUS,CUBE,CUBE_STRUCTURED,OFF,ON|}",
			"$0"
		],
		"description": "Determines the default format for HOLD files.\n\n FOCUS: Includes the TITLE and ACCEPT attributes in HOLD Master Files for FOCUS format (Default). CUBE: In addition to attributes included by HOLDATTR=ON, includes the CUBE-related attributes.\n\n CUBE_STRUCTURED: In addition to attributes included by HOLDATTR=CUBE, preserves segment structure.\n\n OFF: Does not include attributes in the HOLD Master File.\n\n ON: Includes the TITLE (and ACCEPT for format FOCUS) attribute in HOLD Master Files."
	},
	"SET HOLDLIST": {
		"scope": "focexec",
		"prefix": "SET HOLDLIST",
		"body": [
			"${1|SET HOLDLIST=,ON TABLE SET HOLDLIST |}${2|PRINTONLY,ALL,ALLKEYS,EXPLICIT|}",
			"$0"
		],
		"description": "Controls whether only displayed fields or all fields are included in the HOLD or PCHOLD file.\n\n PRINTONLY: Includes only those fields in the HOLD or PCHOLD file that are specified in the report request.\n\n ALL: Includes all fields referenced in a request in the HOLD or PCHOLD file, including both computed fields and fields referenced in a COMPUTE command. ALL is the default value. (OLD may be used as a synonym for ALL.) Note: Vertical sort (BY) fields specified in the request with the NOPRINT option are not included in the HOLD file, even with SET HOLDLIST=ALL.\n\n ALLKEYS: Includes all fields in the HOLD or PCHOLD file, including NOPRINTed BY fields.\n\n EXPLICIT: Includes fields in the HOLD or PCHOLD file that are explicitly omitted from the report output using the NOPRINT option in the request, but does not include fields that are implicitly NOPRINTed. For example, if a field is reformatted in the request, two versions of the field exist, the one with the new format and the one with the original format, which is implicitly NOPRINTed."
	},
	"SET HOLDMISS": {
		"scope": "focexec",
		"prefix": "SET HOLDMISS",
		"body": [
			"${1|SET HOLDMISS=,ON TABLE SET HOLDMISS |}${2|OFF,ON|}",
			"$0"
		],
		"description": "Distinguish between missing data and default values of blank (for character data) or zero (for numeric data) in a HOLD file.\n\n OFF: Does not allow you to store missing data in a HOLD file. OFF is the default value.\n\n ON: Enables you to store missing data in a HOLD file. When TABLE generates a default value for data not found, it generates missing values."
	},
	"SET HTMLCSS": {
		"scope": "focexec",
		"prefix": "SET HTMLCSS",
		"body": [
			"${1|SET HTMLCSS=,ON TABLE SET HTMLCSS |}${2|OFF,ON|}",
			"$0"
		],
		"description": "Controls generating an Internal Cascading Style Sheet.\n\n OFF: Does not create an internal CSS command in the HTML page that displays the report output (Default).\n\n ON: Creates an internal CSS command in the HTML page that displays the report output."
	},
	"SET NODATA": {
		"scope": "focexec",
		"prefix": "SET NODATA",
		"body": [
			"${1|SET NODATA=,ON TABLE SET NODATA |}'${2:string}'",
			"$0"
		],
		"description": "The character string that indicates missing data in a report."
	},
	"SET NULL": {
		"scope": "focexec",
		"prefix": "SET NULL",
		"body": [
			"${1|SET NULL=,ON TABLE SET NULL |}${2|OFF,ON|}",
			"$0"
		],
		"description": "Enables you to create a variable-length comma or tab delimited HOLD file that differentiates between a missing value and a blank string or zero value.The HOLD formats supported for SET NULL=ON are COM, COMT, TAB, and TABT. Missing values in a record are denoted by two consecutive delimiters. A record that starts with a missing value has a delimiter in the first position, and a record that ends with a missing value has a delimiter in the last position.\n\n OFF: Propagates the value zero for a missing numeric value and blank (\"\") for a missing alphanumeric value to a delimited HOLD file (Default_\n\n ON: Propagates missing values to a delimited HOLD file when the field has MISSING=ON in the Master File"
	},
	"SET PAGE-NUM": {
		"scope": "focexec",
		"prefix": "SET PAGE-NUM",
		"body": [
			"${1|SET PAGE-NUM=,ON TABLE SET PAGE-NUM |}${2|ON,OFF,NOPAGE,NOLEAD|}",
			"$0"
		],
		"description": "Controls the numbering of output pages.\n\n ON: displays the page number on the upper left-hand corner of the page. ON is the default value.\n\n OFF: suppresses page numbering.\n\n NOPAGE: suppresses page breaks, causing the report to be printed as a continuous logical page. When PAGE is set to NOPAGE, the LINES parameter controls where column headings are printed. You can use NOLEAD in place of NOPAGE."
	},
	"SET SHORTPATH": {
		"scope": "focexec",
		"prefix": "SET SHORTPATH",
		"body": [
			"${1|SET SHORTPATH=,ON TABLE SET SHORTPATH |}${2|SQL,FOCUS|}",
			"$0"
		],
		"description": "Control Short Path Processing In a Left Outer Join - FOCUS: Omits a host segment from the report output when it has no corresponding cross-referenced segment and the report has a screening condition on the cross-referenced segment. SQL: Supplies missing values for the fields in a missing cross-referenced segment in an outer join. Applies screening conditions against this record and retains the record on the report output if it passes the screening test. Note: There must be an outer join in effect, either as a result of the SET ALL=ON command or a JOIN LEFT_OUTER command (either inside or outside of the Master File)."
	},
	"SET SHOWBLANKS": {
		"scope": "focexec",
		"prefix": "SET SHOWBLANKS",
		"body": [
			"${1|SET SHOWBLANKS=,ON TABLE SET SHOWBLANKS |}${2|OFF,ON|}",
			"$0"
		],
		"description": "Control leading and internal blanks in HTML and EXL2K report output.\n\n OFF: Removes leading and internal blanks in HTML and EXL2K report output (Default).\n\n ON: Preserves leading and internal blanks in HTML and EXL2K report output."
	},
	"SET TIME_SEPARATOR": {
		"scope": "focexec",
		"prefix": "SET TIME_SEPARATOR",
		"body": [
			"ON TABLE SET TIME_SEPARATOR ${1|DOT,COLON|}",
			"$0"
		],
		"description": "Control underlining of column titles on report output.\n\n ON: Underlines column titles on report output (Default).\n\n OFF: Replaces the underline with a blank line.\n\n SKIP: Specifies no underline and no blank line."
	},
	"SET TITLELINE": {
		"scope": "focexec",
		"prefix": "SET TITLELINE",
		"body": [
			"${1|SET TITLELINE=,ON TABLE SET TITLELINE |}${2|ON,OFF,SKIP|}",
			"$0"
		],
		"description": "Control underlining of column titles on report output.\n\n ON: Underlines column titles on report output (Default).\n\n OFF: Replaces the underline with a blank line.\n\n SKIP: Specifies no underline and no blank line."
	},
	"SET TITLES": {
		"scope": "focexec",
		"prefix": "SET TITLES",
		"body": [
			"${1|SET TITLES=,ON TABLE SET TITLES |}${2|ON,OFF,NOPREFIX|}",
			"$0"
		],
		"description": "Control whether to use pre-defined column titles in the Master File as column titles in report output.\n\n ON: Displays the value of the TITLE attribute as the column heading on the report output, if a TITLE attribute exists in the Master File. If the field has a prefix operator in the report request, creates the column heading using both the prefix operator and the TITLE attribute. If there is no TITLE attribute, the field name is used instead. ON is the default value.\n\n OFF: Displays the field name as the column heading on the report output. If the field has a prefix operator in the report request, creates the column heading using both the prefix operator and the field name.\n\n NOPREFIX: Displays the value of the TITLE attribute as the column heading on the report output, if a TITLE attribute exists in the Master File. If there is no TITLE attribute, the field name is used instead. If the field has a prefix operator in the report request, creates the column heading using both the prefix operator and the field name."
	},

	//Style settings
	"STYLE": {
		"scope": "focexec",
		"prefix": "STYLE",
		"body": [
			"ON TABLE SET STYLE *",
			"$0",
			"ENDSTYLE"
		],
		"description": "Controls the numbering of output pages."
	},

	"REPORT": {
		"scope": "focexec",
		"prefix": "TYPE REPORT",
		"body": [
			"TYPE=REPORT, ${1:GRID=${2|OFF,ON|}, }$0$"
		],
		"description": "To identify an entire report in a StyleSheet"
	},
	"SUBTOTAL/GRANDTOTAL tag": {
		"scope": "focexec",
		"prefix": "TYPE TOTAL TAG",
		"body": [
			"TYPE=${1|SUBTOTAL,GRANDTOTAL,RECAP|}, OBJECT=TAG, $0, $"
		],
		"description": "To identify a SUBTOTAL/GRANDTOTAL in a StyleSheet. The OBJECT=TAG option is to format the text that is displayed in the leftmost portion of each SUBTOTAL and GRANDTOTAL row in a report. You can define styling for the subtotal and grand total tag separately from the rest of the row. Text attributes available for the tag, including font, color, size, and style, can be used to differentiate and highlight the tags. Additionally, styling can be applied that turns tags into drilldown links."
	},
	"SUBTOTAL/GRANDTOTAL/RECAP": {
		"scope": "focexec",
		"prefix": "TYPE TOTAL",
		"body": [
			"TYPE=${1|SUBTOTAL,GRANDTOTAL,RECAP|}, ${2:BY=${3:fieldName}, }${4:${5|COLUMN,ACROSSCOLUMN|}=${6:fieldName}, }$0$"
		],
		"description": "To identify a SUBTOTAL/GRANDTOTAL/RECAP in a StyleSheet."
	},
	"DATA": {
		"scope": "focexec",
		"prefix": "TYPE DATA",
		"body": [
			"TYPE=DATA, $0$"
		],
		"description": "To identify all report data in a StyleSheet (except totals, grand totals, subtotals, and horizontal sort (ACROSS) values, which need to be identified separately) use this attribute and value"
	},
	"TITLE": {
		"scope": "focexec",
		"prefix": "TYPE TITLE",
		"body": [
			"TYPE=TITLE, $0$"
		],
		"description": "Within a StyleSheet you can identify column titles of a report in order to format them."
	},
	"ACROSSVALUE": {
		"scope": "focexec",
		"prefix": "TYPE ACROSSVALUE",
		"body": [
			"TYPE=ACROSSVALUE, ${1:ACROSS=${2|fieldName,Nn,An|}, }$0$"
		],
		"description": "To identify all report data in a StyleSheet (except totals, grand totals, subtotals, and horizontal sort (ACROSS) values, which need to be identified separately) use this attribute and value"
	},
	"ACROSSTITLE": {
		"scope": "focexec",
		"prefix": "TYPE ACROSSTITLE",
		"body": [
			"TYPE=ACROSSTITLE, ${1:ACROSS=${2|fieldName,Nn,An|}, }$0$"
		],
		"description": "Specifies a horizontal sort (ACROSS) title."
	},
	"PAGENUM": {
		"scope": "focexec",
		"prefix": "TYPE PAGENUM",
		"body": [
			"TYPE=PAGENUM, $0$"
		],
		"description": "identifies page numbers."
	},
	"SKIPLINE": {
		"scope": "focexec",
		"prefix": "TYPE SKIPLINE",
		"body": [
			"TYPE=SKIPLINE, $0$"
		],
		"description": "Denotes skipped lines generated by ON field SKIP-LINE. This is not supported for reports in HTML format."
	},
	"UNDERLINE": {
		"scope": "focexec",
		"prefix": "TYPE UNDERLINE",
		"body": [
			"TYPE=UNDERLINE, $0$"
		],
		"description": "identifies underlines generated by ON field UNDER-LINE, or by BAR in a Financial Modeling Language (FML) report. This is not supported for reports in HTML format."
	},

	"Nn": {
		"scope": "focexec",
		"prefix": "COLUMN Nn",
		"body": [
			"${1|COLUMN,ACROSSCOLUMN|}=N${2:#}, $0"
		],
		"description": "Identifies a column by its position in the report. To determine this value, count vertical sort (BY) fields, display fields, and ROW-TOTAL fields, from left to right, including 'NOPRINT' fields. For ACROSSCOLUMN, only ACROSS fields are counted."
	},
	"Pn": {
		"scope": "focexec",
		"prefix": "COLUMN Pn",
		"body": [
			"${1|COLUMN,ACROSSCOLUMN|}=P${2:#}, $0"
		],
		"description": "Identifies a column by its position in the report. To determine the value of n, count vertical sort (BY) fields, display fields, and ROW-TOTAL fields from left to right. Do NOT count 'NOPRINT' fields. For ACROSSCOLUMN, only ACROSS fields are counted."
	},
	"Cn": {
		"scope": "focexec",
		"prefix": "COLUMN Cn",
		"body": [
			"COLUMN=C${1:#}, $0"
		],
		"description": "Identifies a display column by its position in the report. To determine the value of n, count only display fields from left to right, including NOPRINT fields. Do NOT count vertical sort (BY) fields or ROW-TOTAL fields. To select all display fields use 'C*'."
	},
	"Bn": {
		"scope": "focexec",
		"prefix": "COLUMN Bn",
		"body": [
			"COLUMN=B${1:#}, $0"
		],
		"description": "Identifies a vertical sort (BY) column by its position in the report. To determine the value of n, count only vertical sort (BY) fields, including 'NOPRINT' fields, from left to right. To select all BY fields use B*."
	},
	"fieldName": {
		"scope": "focexec",
		"prefix": "COLUMN fieldName",
		"body": [
			"${1|COLUMN,ACROSSCOLUMN|}=${2:fieldName}, $0"
		],
		"description": "Identifies a column by its field name. When a field occurs more than once, use field(n) to select a particular occurrence or field(*) to select all occurrences of the field."
	},
	"ROWTOTAL": {
		"scope": "focexec",
		"prefix": "COLUMN ROWTOTAL",
		"body": [
			"${1|COLUMN,ACROSSCOLUMN|}=ROWTOTAL${2:(${3})}, $0"
		],
		"description": "Identifies a column of row totals generated using ROW-TOTAL. When used with ACROSS and multiple display commands, ROWTOTAL generates multiple total columns. Use ROWTOTAL(n) to select a particular total column. Use ROWTOTAL(field) to select the row total column for a particular field. Use ROWTOTAL(*) to select all row total columns in the report."
	},

	"FONT": {
		"scope": "focexec",
		"prefix": "FONT",
		"body": [
			"FONT=${1|ARIAL,ARIAL BLACK,ARIAL UNICODE MS,AVANT GARDE GOTHIC,BOOKMAN,CALIBRI,CAMBRIA,COMIC SANS MS,COURIER,COURIER NEW,GEORGIA,HELVETICA,HELVETICA NARROW,IBIDEFAULT,IMPACT,LUBALIN GRAPH,LUCIDA CONSOLE,LUCIDA SANS UNICODE,NEW CENTURY SCHOOLBOOK,PALATINO,PALATINO LINOTYPE,SANSSERIF,SANS-SERIF,SOUVENIR,SYMBOL,TAHOMA,TIMES,TIMES NEW ROMAN,TREBUCHET MS,VERDANA,WINGDINGS,ZAPF CHANCERY,ZAPFDINGBATS|}, $0"
		],
		"description": "Font"
	},

	"LINES-PER-PAGE": {
		"scope": "focexec",
		"prefix": "LINES-PER-PAGE",
		"body": [
			"LINES-PER-PAGE=${1|N,UNLIMITED|}, $0"
		],
		"description": "Setting the Number of Data Rows For Each Page in an HTML Report Request"
	},

	//Functions
	"ABS": {
		"scope": "focexec",
		"prefix": "wff ABS",
		"body": [
			"ABS(${1:number})"
		],
		"description": "Calculates absolute value"
	},
	"ADMLEV": {
		"scope": "focexec",
		"prefix": "wff ADMLEV",
		"body": [
			"ADMLEV(${1:'A1'}) $0"
		],
		"description": "Obtains the user's administrator level: 'S' - Server,  'A' - App, 'O' - Operator, 'B' - Basic."
	},
	"APINPATH": {
		"scope": "focexec",
		"prefix": "wff APINPATH",
		"body": [
			"APINPATH(${1:length}, ${2:appname}, ${3:output_format})"
		],
		"description": "Find out if application is in application path"
	},
	"ARGLEN": {
		"scope": "focexec",
		"prefix": "wff ARGLEN",
		"body": [
			"ARGLEN(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Returns the length of a character string, excluding trailing blanks. Use combination of CHAR_LENGTH and RTRIM instead."
	},
	"ASCEBC": {
		"scope": "focexec",
		"prefix": "wff ASCEBC",
		"body": [
			"ASCEBC(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "ASCII -> EBCDIC translation"
	},
	"ASKYN": {
		"scope": "focexec",
		"prefix": "wff ASKYN",
		"body": [
			"ASKYN(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7})"
		],
		"description": "Dummy function"
	},
	"ASQ.": {
		"scope": "focexec",
		"prefix": "wff ASQ.",
		"body": [
			"ASQ.${1:field}"
		],
		"description": "Computes the average sum of squares for standard deviation in statistical analysis."
	},
	"ATODBL": {
		"scope": "focexec",
		"prefix": "wff ATODBL",
		"body": [
			"ATODBL(${1:string}, ${2:length}, ${3:output_format})"
		],
		"description": "Converts a character string to double-precision format. Use TO_NUMBER instead."
	},
	"AVE.": {
		"scope": "focexec",
		"prefix": "wff AVE.",
		"body": [
			"AVE.${1:field}"
		],
		"description": "Computes the average value of the field."
	},
	"AVE.DST.": {
		"scope": "focexec",
		"prefix": "wff AVE.DST.",
		"body": [
			"AVE.DST.${1:field}"
		],
		"description": "Computes the average distinct value of the field."
	},
	"AYM": {
		"scope": "focexec",
		"prefix": "wff AYM",
		"body": [
			"AYM(${1:indate}, ${2:months}, ${3:output_format})"
		],
		"description": "Adds or subtracts months to or from Dates"
	},
	"AYMD": {
		"scope": "focexec",
		"prefix": "wff AYMD",
		"body": [
			"AYMD(${1:indate}, ${2:days}, ${3:output_format})"
		],
		"description": "Adds or subtracts days to or from a date"
	},
	"AYMDI": {
		"scope": "focexec",
		"prefix": "wff AYMDI",
		"body": [
			"AYMDI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4})"
		],
		"description": "Add or subtract days to or from a date"
	},
	"AYMI": {
		"scope": "focexec",
		"prefix": "wff AYMI",
		"body": [
			"AYMI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4})"
		],
		"description": "Add or subtract months to or from dates"
	},
	"B64DECODE": {
		"scope": "focexec",
		"prefix": "wff B64DECODE",
		"body": [
			"B64DECODE(${1:encoded_string}, ${2:output_format})"
		],
		"description": "Decrypt the string"
	},
	"BAANHASH": {
		"scope": "focexec",
		"prefix": "wff BAANHASH",
		"body": [
			"BAANHASH(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9}, ${10:})"
		],
		"description": ""
	},
	"BAR": {
		"scope": "focexec",
		"prefix": "wff BAR ",
		"body": [
			"BAR(${1:barlength}, ${2:infield}, ${3:maxvalue}, '${4:char}', ${5:output_format})"
		],
		"description": "Produce a bar chart"
	},
	"BITSON": {
		"scope": "focexec",
		"prefix": "wff BITSON",
		"body": [
			"BITSON(${1:bitnumber}, ${2:string}, ${3:output_format})"
		],
		"description": "Determine if a bit is ON or OFF"
	},
	"BITVAL": {
		"scope": "focexec",
		"prefix": "wff BITVAL",
		"body": [
			"BITVAL(${1:string}, ${2:startbit}, ${3:number}, ${4:output_format})"
		],
		"description": "Evaluate a bit string as a binary integer"
	},
	"BNYSRC": {
		"scope": "focexec",
		"prefix": "wff BNYSRC",
		"body": [
			"BNYSRC(${1:arg1})"
		],
		"description": "Get the number of FOR value"
	},
	"BYTVAL": {
		"scope": "focexec",
		"prefix": "wff BYTVAL",
		"body": [
			"BYTVAL(${1:character}, ${2:output_format})"
		],
		"description": "Translates a character to a decimal value"
	},
	"CALLDB2": {
		"scope": "focexec",
		"prefix": "wff CALLDB2",
		"body": [
			"CALLDB2(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4})"
		],
		"description": "Invoke a user-written DB2 application"
	},
	"CALPRCNT": {
		"scope": "focexec",
		"prefix": "wff CALPRCNT",
		"body": [
			"CALPRCNT(${1:percent}, ${2:populations}, ${3:output_format})"
		],
		"description": "Stratified sampling with user defined percentages"
	},
	"CEILING": {
		"scope": "focexec",
		"prefix": "wff CEILING",
		"body": [
			"CEILING(${1:number})"
		],
		"description": "Returns the smallest integer value that is greater than or equal to a number. The output data type is the same as the input data type."
	},
	"CFGQRY": {
		"scope": "focexec",
		"prefix": "wff CFGQRY",
		"body": [
			"CFGQRY(${1:length}, ${2:conf_parm}, ${3:outlength}, ${4:output_format})"
		],
		"description": "Returns the server configuration setting value"
	},
	"CHAR": {
		"scope": "focexec",
		"prefix": "wff CHAR",
		"body": [
			"CHAR(${1:number_code})"
		],
		"description": "Return the character based on the number code. NULL is returned if the number code is not in the range 0-255."
	},
	"CHAR_LENGTH": {
		"scope": "focexec",
		"prefix": "wff CHAR_LENGTH",
		"body": [
			"CHAR_LENGTH(${1:string})"
		],
		"description": "Returns the character length of source string."
	},
	"CHECKMD5": {
		"scope": "focexec",
		"prefix": "wff CHECKMD5",
		"body": [
			"CHECKMD5(${1:data_buffer})"
		],
		"description": "Compute MD5 hash check value of its input parameter and return the 128 bit value as an alphanumeric string in format A16. This can be used for equality search of the fields."
	},
	"CHECKPRIVS": {
		"scope": "focexec",
		"prefix": "wff CHECKPRIVS",
		"body": [
			"CHECKPRIVS(${1:user_priv_string}, ${2:output_format})"
		],
		"description": "Checks user privilege status"
	},
	"CHECKSUM": {
		"scope": "focexec",
		"prefix": "wff CHECKSUM",
		"body": [
			"CHECKSUM(${1:buffer})"
		],
		"description": "Compute a hash sum, called the checksum, as a whole number in format I11 of its input parameter. This can be used for equality search of the fields."
	},
	"CHGDAT": {
		"scope": "focexec",
		"prefix": "wff CHGDAT",
		"body": [
			"CHGDAT('${1:in_display_option}', '${2:out_display_option}', ${3:date_string}, ${4:output_format})"
		],
		"description": "Changes the format of a date"
	},
	"CHGDATI": {
		"scope": "focexec",
		"prefix": "wff CHGDATI",
		"body": [
			"CHGDATI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5})"
		],
		"description": "Change the format of a date"
	},
	"CHKFMT": {
		"scope": "focexec",
		"prefix": "wff CHKFMT",
		"body": [
			"CHKFMT(${1:length}, ${2:string}, '${3:mask}', ${4:output_format})"
		],
		"description": "Validation of a character string for the format"
	},
	"CHKNUM": {
		"scope": "focexec",
		"prefix": "wff CHKNUM",
		"body": [
			"CHKNUM(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Validation of a character string for the numeric format"
	},
	"CHKPCK": {
		"scope": "focexec",
		"prefix": "wff CHKPCK",
		"body": [
			"CHKPCK(${1:length}, ${2:in_value}, ${3:error}, ${4:output_format})"
		],
		"description": "Validate a packed field"
	},
	"CLSDDREC": {
		"scope": "focexec",
		"prefix": "wff CLSDDREC",
		"body": [
			"CLSDDREC(${1:output_format})"
		],
		"description": "Close all files opened by the PUTDDREC function"
	},
	"CMEMSG": {
		"scope": "focexec",
		"prefix": "wff CMEMSG",
		"body": [
			"CMEMSG(${1:error_code}, ${2:arg_num}, ${3:arg1_length}, ${4:arg1}, ${5:arg2_length}, ${6:arg2}, ${7:arg3_length}, ${8:arg3}, ${9:outlength}, ${10:output_format})"
		],
		"description": "Returns error message text"
	},
	"CMENUM": {
		"scope": "focexec",
		"prefix": "wff CMENUM",
		"body": [
			"CMENUM(${1:error_code})"
		],
		"description": "Sets &FOCERRNUM variable"
	},
	"CNCTGRP": {
		"scope": "focexec",
		"prefix": "wff CNCTGRP",
		"body": [
			"CNCTGRP(${1:output_format})"
		],
		"description": "Retrieves the primary group ID of the connected user"
	},
	"CNCTUSR": {
		"scope": "focexec",
		"prefix": "wff CNCTUSR",
		"body": [
			"CNCTUSR(${1:output_format})"
		],
		"description": "Retrieves the ID of the connected user"
	},
	"CNT.": {
		"scope": "focexec",
		"prefix": "wff CNT",
		"body": [
			"CNT.${1:field}"
		],
		"description": "Counts the number of occurrences of the field."
	},
	"CNT.DST.": {
		"scope": "focexec",
		"prefix": "wff CNT.DST.",
		"body": [
			"CNT.DST.${1:field}"
		],
		"description": "Counts the number of distinct values within a field."
	},
	"CONCAT": {
		"scope": "focexec",
		"prefix": "wff CONCAT",
		"body": [
			"CONCAT(${1:string_1}, ${2:string_2})"
		],
		"description": "Concatenates two strings to form a single string."
	},
	"CTRAN": {
		"scope": "focexec",
		"prefix": "wff CTRAN",
		"body": [
			"CTRAN(${1:length}, ${2:string}, ${3:decimal}, ${4:decvalue}, ${5:output_format})"
		],
		"description": "Text modification, translate one character to another"
	},
	"CTRFLD": {
		"scope": "focexec",
		"prefix": "wff CTRFLD",
		"body": [
			"CTRFLD(${1:string}, ${2:length}, ${3:output_format})"
		],
		"description": "Alignment of a character string, centered"
	},
	"CTRLCHAR": {
		"scope": "focexec",
		"prefix": "wff CTRLCHAR",
		"body": [
			"CTRLCHAR(${1:ctrl_char})"
		],
		"description": "Return the nonprintable control character specific to the running platform."
	},
	"CURRPATH": {
		"scope": "focexec",
		"prefix": "wff CURRPATH",
		"body": [
			"CURRPATH(${1:outlength}, ${2:output_format})"
		],
		"description": "Get the value of the environment variable PATH"
	},
	"CVTSTIME": {
		"scope": "focexec",
		"prefix": "wff CVTSTIME",
		"body": [
			"CVTSTIME(${1:format_style}, ${2:in_field}, ${3:output_format})"
		],
		"description": "Convert the 64-bit DEC standard date and time to a character string. It is generally used with GETSTIME. OpenVMS server only."
	},
	"DADMY": {
		"scope": "focexec",
		"prefix": "wff DADMY",
		"body": [
			"DADMY(${1:indate}, ${2:output_format})"
		],
		"description": "Converts a legacy date to an integer, in day-month-year format"
	},
	"DADMYI": {
		"scope": "focexec",
		"prefix": "wff DADMYI",
		"body": [
			"DADMYI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts a legacy date to an integer, in day-month-year format"
	},
	"DADYM": {
		"scope": "focexec",
		"prefix": "wff DADYM",
		"body": [
			"DADYM(${1:indate}, ${2:output_format})"
		],
		"description": "Converts a legacy date to an integer, in day-year-month format"
	},
	"DADYMI": {
		"scope": "focexec",
		"prefix": "wff DADYMI",
		"body": [
			"DADYMI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts a legacy date to an integer, in day-year-month format"
	},
	"DAMDY": {
		"scope": "focexec",
		"prefix": "wff DAMDY",
		"body": [
			"DAMDY(${1:indate}, ${2:output_format})"
		],
		"description": "Converts a legacy date to an integer, in month-day-year format"
	},
	"DAMDYI": {
		"scope": "focexec",
		"prefix": "wff DAMDYI",
		"body": [
			"DAMDYI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts a legacy date to an integer, in month-day-year format"
	},
	"DAMYD": {
		"scope": "focexec",
		"prefix": "wff DAMYD",
		"body": [
			"DAMYD(${1:indate}, ${2:output_format})"
		],
		"description": "Converts a legacy date to an integer, in month-year-day format"
	},
	"DAMYDI": {
		"scope": "focexec",
		"prefix": "wff DAMYDI",
		"body": [
			"DAMYDI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts a legacy date to an integer, in month-year-day format"
	},
	"DATEADD": {
		"scope": "focexec",
		"prefix": "wff DATEADD",
		"body": [
			"DATEADD(${1:date}, '${2:component}', ${3:increment})"
		],
		"description": "Adds or subtracts a date unit to or from a date. Use DTADD instead."
	},
	"DATEADDI": {
		"scope": "focexec",
		"prefix": "wff DATEADDI",
		"body": [
			"DATEADDI(${1:date}, '${2:component}', ${3:increment})"
		],
		"description": "Adds or subtracts a date unit to or from a date. Use DTADD instead."
	},
	"DATECVT": {
		"scope": "focexec",
		"prefix": "wff DATECVT",
		"body": [
			"DATECVT(${1:date}, '${2:in_format}', '${3:output_format}')"
		],
		"description": "Converts the format of a date"
	},
	"DATECVTI": {
		"scope": "focexec",
		"prefix": "wff DATECVTI",
		"body": [
			"DATECVTI(${1:date}, '${2:in_format}', '${3:output_format}')"
		],
		"description": "Converts the format of a date"
	},
	"DATEDIF": {
		"scope": "focexec",
		"prefix": "wff DATEDIF",
		"body": [
			"DATEDIF(${1:start_date}, ${2:end_date}, '${3:component}')"
		],
		"description": "Finds the difference between two dates. Use DTDIFF instead (for day only)."
	},
	"DATEDIFI": {
		"scope": "focexec",
		"prefix": "wffDATEDIFI ",
		"body": [
			"DATEDIFI(${1:start_date}, ${2:end_date}, '${3:component}')"
		],
		"description": "Finds the difference between two dates. Use DTDIFF instead."
	},
	"DATEMOV": {
		"scope": "focexec",
		"prefix": "wff DATEMOV",
		"body": [
			"DATEMOV(${1:date}, '${2:move_point}')"
		],
		"description": "Moves a date to a significant point. Use DTRUNC instead."
	},
	"DATEMOVI": {
		"scope": "focexec",
		"prefix": "wff DATEMOVI",
		"body": [
			"DATEMOVI(${1:date}, '${2:move_point}')"
		],
		"description": "Moves a date to a significant point"
	},
	"DATETRAN": {
		"scope": "focexec",
		"prefix": "wff DATETRAN",
		"body": [
			"DATETRAN(${1:indate})"
		],
		"description": "Formats date in an international format"
	},
	"DAYDM": {
		"scope": "focexec",
		"prefix": "wff DAYDM",
		"body": [
			"DAYDM(${1:indate}, ${2:output_format})"
		],
		"description": "Converts a legacy date to an integer, in year-day-month format"
	},
	"DAYDMI": {
		"scope": "focexec",
		"prefix": "wff DAYDMI",
		"body": [
			"DAYDMI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts a legacy date to an integer, in year-day-month format"
	},
	"DAYMD": {
		"scope": "focexec",
		"prefix": "wff DAYMD",
		"body": [
			"DAYMD(${1:indate}, ${2:output_format})"
		],
		"description": "Converts a legacy date to an integer, in year-month-day format"
	},
	"DAYMDI": {
		"scope": "focexec",
		"prefix": "wff DAYMDI",
		"body": [
			"DAYMDI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts a legacy date to an integer, in year-month-day format"
	},
	"DB_EXPR": {
		"scope": "focexec",
		"prefix": "wff DB_EXPR",
		"body": [
			"DB_EXPR(${1:sql_expression})"
		],
		"description": "Inserts sql_expression 'as-is' into the native SQL generated for a FOCUS language request."
	},
	"DB_INFILE": {
		"scope": "focexec",
		"prefix": "wff DB_INFILE",
		"body": [
			"DB_INFILE(${1:lkp_mfd}, ${2:src_fld1}, ${3:lkp_fld1}, ${4:[src_fld2]}, ${5:[lkp_fld2]})"
		],
		"description": "Returns true if the values for source columns are present in the lookup file."
	},
	"DB_LOOKUP": {
		"scope": "focexec",
		"prefix": "wff DB_LOOKUP",
		"body": [
			"DB_LOOKUP(${1:lkp_mfd}, ${2:src_fld1}, ${3:lkp_fld1}, ${4:[src_fld2]}, ${5:[lkp_fld2]}  ${6:return_fld})"
		],
		"description": "Retrieves a value from a lookup data source"
	},
	"DBLOOKUP": {
		"scope": "focexec",
		"prefix": "wff DBLOOKUP",
		"body": [
			"DBLOOKUP(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Internal Function"
	},
	"DCTRAN": {
		"scope": "focexec",
		"prefix": "wff DCTRAN",
		"body": [
			"DCTRAN(${1:length}, ${2:string}, ${3:decimal}, ${4:decvalue}, ${5:output_format})"
		],
		"description": "Translates a single-byte or double-byte character within a character string to another character based on its decimal value."
	},
	"DECODE": {
		"scope": "focexec",
		"prefix": "wff DECODE",
		"body": [
			"DECODE ${1:fieldname}(${2:code1} ${3:result1} ${4:code2} ${5:result2} ${6:ELSE ${7:default} }) $0"
		],
		"description": "Decodes from a list of code/result values"
	},
	"DEDIT": {
		"scope": "focexec",
		"prefix": "wff DEDIT",
		"body": [
			"DEDIT(${1:length}, ${2:string}, ${3:mask_length}, '${4:mask}', ${5:output_format})"
		],
		"description": "Extracts or adds characters within a string when server is configured to use a DBCS code page."
	},
	"DEFERID": {
		"scope": "focexec",
		"prefix": "wff DEFERID",
		"body": [
			"DEFERID(${1:output_format})"
		],
		"description": "Get deferred ID"
	},
	"DEMOTRAN": {
		"scope": "focexec",
		"prefix": "wff DEMOTRAN",
		"body": [
			"DEMOTRAN(${1:key_name}, ${2:length}, ${3:language}, ${4:output_format})"
		],
		"description": "Returns the multilingual sentences for the keyword in demotran.c"
	},
	"DEXPAVEI": {
		"scope": "focexec",
		"prefix": "wff DEXPAVEI",
		"body": [
			"DEXPAVEI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9})"
		],
		"description": "Computes projection values of provided sort key field based on double exponential average method"
	},
	"DIGITS": {
		"scope": "focexec",
		"prefix": "wff DIGITS",
		"body": [
			"DIGITS(${1:number}, ${2:out_length})"
		],
		"description": "Evaluates numeric expression as a whole number with fraction truncated and returns last N digits of its absolute value in a character string with leading zeros."
	},
	"DMOD": {
		"scope": "focexec",
		"prefix": "wff DMOD",
		"body": [
			"DMOD(${1:dividend}, ${2:divisor}, ${3:output_format})"
		],
		"description": "Calculates the remainder from a division as a decimal number. Use MOD instead."
	},
	"DMY": {
		"scope": "focexec",
		"prefix": "wff DMY",
		"body": [
			"DMY(${1:from_date}, ${2:to_date})"
		],
		"description": "Calculates the difference between two dates in day-month-year format"
	},
	"DMYI": {
		"scope": "focexec",
		"prefix": "wff DMYI",
		"body": [
			"DMYI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4})"
		],
		"description": "Calculates the difference between two dates in day-month-year format"
	},
	"DOWK": {
		"scope": "focexec",
		"prefix": "wff DOWK",
		"body": [
			"DOWK(${1:indate}, ${2:output_format})"
		],
		"description": "Finds the day of the week"
	},
	"DOWKI": {
		"scope": "focexec",
		"prefix": "wff DOWKI",
		"body": [
			"DOWKI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Find the day of the week"
	},
	"DOWKL": {
		"scope": "focexec",
		"prefix": "wff DOWKL",
		"body": [
			"DOWKL(${1:indate}, ${2:output_format})"
		],
		"description": "Finds the day of the week"
	},
	"DOWKLI": {
		"scope": "focexec",
		"prefix": "wff DOWKLI",
		"body": [
			"DOWKLI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Find the day of the week"
	},
	"DPART": {
		"scope": "focexec",
		"prefix": "wff DPART",
		"body": [
			"DPART(${1:date}, '${2:component}', ${3:output_format})"
		],
		"description": "Retrieves a date component as a numeric value. Use DTPART instead."
	},
	"DSTBULK": {
		"scope": "focexec",
		"prefix": "wff DSTBULK",
		"body": [
			"DSTBULK(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9}, ${10:})"
		],
		"description": "Maintain distribution lists"
	},
	"DSTMEM": {
		"scope": "focexec",
		"prefix": "wff DSTMEM",
		"body": [
			"DSTMEM(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9}, ${10:})"
		],
		"description": "Maintain single distribution list members"
	},
	"DSTRIP": {
		"scope": "focexec",
		"prefix": "wff DSTRIP",
		"body": [
			"DSTRIP(${1:length}, ${2:string}, ${3:char}, ${4:output_format})"
		],
		"description": "Removes all occurrences of a specific single-byte or double-byte character from a string."
	},
	"DSTRUN": {
		"scope": "focexec",
		"prefix": "wff DSTRUN",
		"body": [
			"DSTRUN(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9}, ${10:})"
		],
		"description": "Immediately run a scheduled job"
	},
	"DSUBSTR": {
		"scope": "focexec",
		"prefix": "wff DSUBSTR",
		"body": [
			"DSUBSTR(${1:length}, ${2:string}, ${3:start}, ${4:end}, ${5:sublength}, ${6:output_format})"
		],
		"description": "Extracts a substring when server is configured to use a DBCS code page."
	},
	"DT_CURRENT_DATE": {
		"scope": "focexec",
		"pref DT_CURRENx": "wff DT_CURRENT_DATE",
		"body": [
			"DT_CURRENT_DATE()"
		],
		"description": "Return the datetime with the current date provided by the running platform in Date-Time format. The time portion of the datetime is set to zero."
	},
	"DT_CURRENT_DATETIME": {
		"scope": "focexec",
		"pref DT_CURRENx": "wff DT_CURRENT_DATETIME",
		"body": [
			"DT_CURRENT_DATETIME(${1:component})"
		],
		"description": "Return the datetime with the current date and time provided by the running platform in Date-Time format with the time precision specified by function parameter."
	},
	"DT_CURRENT_TIME": {
		"scope": "focexec",
		"pref DT_CURRENx": "wff DT_CURRENT_TIME",
		"body": [
			"DT_CURRENT_TIME(${1:component})"
		],
		"description": "Return the datetime with the current time provided by the running platform in Date-Time format with the time precision specified by function parameter. The date portion of the returned datetime is set to zero."
	},
	"DTADD": {
		"scope": "focexec",
		"prefix": "wff DTADD",
		"body": [
			"DTADD(${1:date}, ${2:component}, ${3:increment})"
		],
		"description": "Given the date in Standard Date or in Date-Time format, returns the new date after adding the specified number of components. The returned date format is the same as the input date format."
	},
	"DTDIFF": {
		"scope": "focexec",
		"prefix": "wff DTDIFF",
		"body": [
			"DTDIFF(${1:end_date}, ${2:start_date}, ${3:component})"
		],
		"description": "Given two dates in Standard Date or in Date-Time formats, returns the number of given component boundaries between the two dates. The returned value has the format Integer for calendar components, the Double Precision Floating Point format for time components."
	},
	"DTDMY": {
		"scope": "focexec",
		"prefix": "wff DTDMY",
		"body": [
			"DTDMY(${1:number}, ${2:output_format})"
		],
		"description": "Converts an integer to a day-month-year date"
	},
	"DTDMYI": {
		"scope": "focexec",
		"prefix": "wff DTDMYI",
		"body": [
			"DTDMYI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts an integer to a day-month-year date"
	},
	"DTDYM": {
		"scope": "focexec",
		"prefix": "wff DTDYM",
		"body": [
			"DTDYM(${1:number}, ${2:output_format})"
		],
		"description": "Converts an integer to a day-year-month date"
	},
	"DTDYMI": {
		"scope": "focexec",
		"prefix": "wff DTDYMI",
		"body": [
			"DTDYMI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts an integer to a day-year-month date"
	},
		"DTMDY": {
		"scope": "focexec",
		"prefix": "wff DTMDY",
		"body": [
			"DTMDY(${1:number}, ${2:output_format})"
		],
		"description": "Converts an integer to a month-day-year date"
	},
	"DTMDYI": {
		"scope": "focexec",
		"prefix": "wff DTMDYI",
		"body": [
			"DTMDYI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts an integer to a month-day-year date"
	},
	"DTMYD": {
		"scope": "focexec",
		"prefix": "wff DTMYD",
		"body": [
			"DTMYD(${1:number}, ${2:output_format})"
		],
		"description": "Converts an integer to a month-year-day date"
	},
	"DTMYDI": {
		"scope": "focexec",
		"prefix": "wff DTMYDI",
		"body": [
			"DTMYDI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts an integer to a month-year-day date"
	},
	"DTOG": {
		"scope": "focexec",
		"prefix": "wff DTOG",
		"body": [
			"DTOG(${1:arg1}, ${2:arg2})"
		],
		"description": "Calls CVT$CONVERT_FLOAT to convert VAX D Floating point data to VAX G Floating point data"
	},
	"DTPART": {
		"scope": "focexec",
		"prefix": "wff DTPART",
		"body": [
			"DTPART(${1:date}, ${2:component})"
		],
		"description": "Given the date in Standard Date or in Date-Time format, returns the number of components specified by the second parameter."
	},
	"DTRUNC": {
		"scope": "focexec",
		"prefix": "wff DTRUNC",
		"body": [
			"DTRUNC(${1:date}, ${2:period})"
		],
		"description": "Given the date in Standard Date or in Date-Time format, returns the date which is the first day of the date period encompassing the given date or datetime."
	},
	"DTYDM": {
		"scope": "focexec",
		"prefix": "wff DTYDM",
		"body": [
			"DTYDM(${1:number}, ${2:output_format})"
		],
		"description": "Converts an integer to a year-day-month date"
	},
	"DTYDMI": {
		"scope": "focexec",
		"prefix": "wff DTYDMI",
		"body": [
			"DTYDMI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts an integer to a year-day-month date"
	},
	"DTYMD": {
		"scope": "focexec",
		"prefix": "wff DTYMD",
		"body": [
			"DTYMD(${1:number}, ${2:output_format})"
		],
		"description": "Converts an integer to a year-month-day date"
	},
	"DTYMDI": {
		"scope": "focexec",
		"prefix": "wff DTYMDI",
		"body": [
			"DTYMDI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts an integer to a year-month-day date"
	},
	"EBCASC": {
		"scope": "focexec",
		"prefix": "wff EBCASC",
		"body": [
			"EBCASC(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "EBCDIC -> ASCII translation"
	},
	"EDAUT1": {
		"scope": "focexec",
		"prefix": "wff EDAUT1",
		"body": [
			"EDAUT1(${1:arg1}, ${2:arg2})"
		],
		"description": ""
	},
	"EDAYSI": {
		"scope": "focexec",
		"prefix": "wff EDAYSI",
		"body": [
			"EDAYSI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8})"
		],
		"description": "Calculates number of elapsed days"
	},
	"EDIT": {
		"scope": "focexec",
		"prefix": "wff EDIT",
		"body": [
			"EDIT(${1:string_or_number}, '${2:mask}')"
		],
		"description": "Text modification, extract or add characters"
	},
	"EDIT(char)": {
		"scope": "focexec",
		"prefix": "wff EDIT(char)",
		"body": [
			"EDIT(${1:char})"
		],
		"description": "Converts the format of a field. Use TO_NUMBER/TO_INTEGER (for alpha argument), DIGITS(for integer argument) instead."
	},
	"EDIT(int)": {
		"scope": "focexec",
		"prefix": "wff EDIT(int)",
		"body": [
			"EDIT(${1:int})"
		],
		"description": "Converts the format of a field. Use TO_NUMBER/TO_INTEGER (for alpha argument), DIGITS(for integer argument) instead."
	},
	"EDIT(pack)": {
		"scope": "focexec",
		"prefix": "wff EDIT(pack)",
		"body": [
			"EDIT(${1:pack})"
		],
		"description": "Converts the format of a field. Use TO_NUMBER/TO_INTEGER (for alpha argument), DIGITS(for integer argument) instead."
	},
	"EDIT(real)": {
		"scope": "focexec",
		"prefix": "wff EDIT(real)",
		"body": [
			"EDIT(${1:real})"
		],
		"description": "Converts the format of a field. Use TO_NUMBER/TO_INTEGER (for alpha argument), DIGITS(for integer argument) instead."
	},
	"EDIT2": {
		"scope": "focexec",
		"prefix": "wff EDIT2",
		"body": [
			"EDIT2(${1:in_value}, ${2:format})"
		],
		"description": "Convert numeric data, a date or a datetime to a character string according to external format. The format has to be valid for given data."
	},
	"EMGPUT": {
		"scope": "focexec",
		"prefix": "wff EMGPUT",
		"body": [
			"EMGPUT(${1:error_code}, ${2:arg_num}, ${3:arg1_length}, ${4:arg1}, ${5:arg2_length}, ${6:arg2}, ${7:arg3_length}, ${8:arg3}, ${9:outlength}, ${10:output_format})"
		],
		"description": "Copy Manager Error Message User Written Subroutine. The same as CMEMSG, but it does the message output."
	},
	"ENCRYPT": {
		"scope": "focexec",
		"prefix": "wff ENCRYPT",
		"body": [
			"ENCRYPT(${1:password})"
		],
		"description": "Encrypt password"
	},
	"EURHLD": {
		"scope": "focexec",
		"prefix": "wff EURHLD",
		"body": [
			"EURHLD(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6})"
		],
		"description": "Called by TABLE"
	},
	"EURXCH": {
		"scope": "focexec",
		"prefix": "wff EURXCH",
		"body": [
			"EURXCH(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9})"
		],
		"description": "Returns currency exchange rate"
	},
	"EXP": {
		"scope": "focexec",
		"prefix": "wff EXP",
		"body": [
			"EXP(${1:power}, ${2:output_format})"
		],
		"description": "Raise 'e' to the n-th power. Use EXPONENT instead."
	},
	"EXPAVEI": {
		"scope": "focexec",
		"prefix": "wff EXPAVEI",
		"body": [
			"EXPAVEI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8})"
		],
		"description": "Compute projection values of sort key field provided based on exponential average method"
	},
	"EXPN": {
		"scope": "focexec",
		"prefix": "wff EXPN",
		"body": [
			"EXPN(${1:number})"
		],
		"description": "Evaluate a number in scientific notation"
	},
	"EXPONENT": {
		"scope": "focexec",
		"prefix": "wff EXPONENT",
		"body": [
			"EXPONENT(${1:power})"
		],
		"description": "Raises the base 'e' to the given power. The output data type is numeric."
	},
	"EXTDXD": {
		"scope": "focexec",
		"prefix": "wff EXTDXD",
		"body": [
			"EXTDXD(${1:arg1}, ${2:arg2})"
		],
		"description": "Dummy function"
	},
	"EXTDXF": {
		"scope": "focexec",
		"prefix": "wff EXTDXF",
		"body": [
			"EXTDXF(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Internal DM function: unload internal MASTERs, remove temp USE entries"
	},
	"EXTDXI": {
		"scope": "focexec",
		"prefix": "wff EXTDXI",
		"body": [
			"EXTDXI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6})"
		],
		"description": "User call to generate external index pointer."
	},
	"FERRMES": {
		"scope": "focexec",
		"prefix": "wff FERRMES",
		"body": [
			"FERRMES(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Prints an error message"
	},
	"FEXERR": {
		"scope": "focexec",
		"prefix": "wff FEXERR",
		"body": [
			"FEXERR(${1:error}, ${2:output_format})"
		],
		"description": "Retrieves an error message"
	},
	"FGETENV": {
		"scope": "focexec",
		"prefix": "wff FGETENV",
		"body": [
			"FGETENV(${1:length}, '${2:varname}', ${3:outlength}, ${4:output_format})"
		],
		"description": "Environment variable, retrieve the value. Use GETENV instead."
	},
	"FIND": {
		"scope": "focexec",
		"prefix": "wff FIND",
		"body": [
			"FIND(${1:field}${2:[AS dbfield]} IN${4:file})"
		],
		"description": "Verify the existence of a value in an indexed field"
	},
	"FINDFOC": {
		"scope": "focexec",
		"prefix": "wff FINDFOC",
		"body": [
			"FINDFOC(${1:arg1}, ${2:arg2}, ${3:output_format})"
		],
		"description": "Determine if a file exists"
	},
	"FINDMEM": {
		"scope": "focexec",
		"prefix": "wff FINDMEM",
		"body": [
			"FINDMEM(${1:arg1}, ${2:arg2}, ${3:output_format})"
		],
		"description": "Find a member of a partitioned data set"
	},
	"FIQTR": {
		"scope": "focexec",
		"prefix": "wff FIQTR",
		"body": [
			"FIQTR(${1:input_date}, ${2:loworder}, ${3:start_month}, ${4:start_day}, ${5:method}, ${6:output_format})"
		],
		"description": "Extracts fiscal quarter"
	},
	"FIYR": {
		"scope": "focexec",
		"prefix": "wff FIYR",
		"body": [
			"FIYR(${1:input_date}, ${2:loworder}, ${3:start_month}, ${4:start_day}, ${5:method}, ${6:output_format})"
		],
		"description": "Extracts fiscal year"
	},
	"FIYYQ": {
		"scope": "focexec",
		"prefix": "wff FIYYQ",
		"body": [
			"FIYYQ(${1:input_date}, ${2:loworder}, ${3:start_month}, ${4:start_day}, ${5:method}, ${6:output_format})"
		],
		"description": "Converts date to fiscal year-and-quarter format"
	},
	"FLOOR": {
		"scope": "focexec",
		"prefix": "wff FLOOR",
		"body": [
			"FLOOR(${1:number})"
		],
		"description": "Returns the largest integer value equal to or less than input number. The output data type is the same as the input data type."
	},
	"FMLCAP": {
		"scope": "focexec",
		"prefix": "wff FMLCAP",
		"body": [
			"FMLCAP(${1:arg1})"
		],
		"description": "Retrieves captions in an FML request"
	},
	"FMLFOR": {
		"scope": "focexec",
		"prefix": "wff FMLFOR",
		"body": [
			"FMLFOR(${1:arg1})"
		],
		"description": "Retrieves FML tag values"
	},
	"FMLINFO": {
		"scope": "focexec",
		"prefix": "wff FMLINFO",
		"body": [
			"FMLINFO(${1:arg1}, ${2:arg2})"
		],
		"description": "Retain FOR Values in an FML Request"
	},
	"FMLLIST": {
		"scope": "focexec",
		"prefix": "wff FMLLIST",
		"body": [
			"FMLLIST(${1:arg1}, ${2:arg2})"
		],
		"description": "Retrieves an FML tag list"
	},
	"FMLLISTI": {
		"scope": "focexec",
		"prefix": "wff FMLLISTI",
		"body": [
			"FMLLISTI(${1:arg1}, ${2:arg2})"
		],
		"description": "Retrieves an FML tag list"
	},
	"FMOD": {
		"scope": "focexec",
		"prefix": "wff FMOD",
		"body": [
			"FMOD(${1:dividend}, ${2:divisor}, ${3:output_format})"
		],
		"description": "Calculates the remainder from a division as a floating-point number. Use MOD instead."
	},
	"FORECAST": {
		"scope": "focexec",
		"prefix": "wff FORECAST",
		"body": [
			"FORECAST(${1:infield}, ${2:increment}, ${3:npredict}, ${4:method}, ${5:npoints})"
		],
		"description": "Calculate trends in numeric data and predict values beyond the range of those stored in the data source"
	},
	"FPRINT": {
		"scope": "focexec",
		"prefix": "wff FPRINT",
		"body": [
			"FPRINT(${1:value}, '${2:out_format}', ${3:output_format})"
		],
		"description": "Converts any type to alpha"
	},
	"FPUTENV": {
		"scope": "focexec",
		"prefix": "wffFPUTENV ",
		"body": [
			"FPUTENV(${1:varname_length}, '${2:varname}', ${3:value_length}, ${4:value}, ${5:output_format})"
		],
		"description": "Environment variable, assign the value. Use PUTENV instead."
	},
	"FST.": {
		"scope": "focexec",
		"prefix": "wff FST.",
		"body": [
			"FST.${1:field}"
		],
		"description": "Generates the first physical instance of the field."
	},
	"FTOA": {
		"scope": "focexec",
		"prefix": "wff FTOA",
		"body": [
			"FTOA(${1:number}, '(${2:format})', '${3:output}')"
		],
		"description": "The FTOA function converts a number up to 16 digits long from numeric format to alphanumeric format. It retains the decimal positions of the number and right-justifies it with leading spaces. You can also add edit options to a number converted by FTOA. When converting a number containing decimals to a character string, you must specify an alphanumeric format large enough to accommodate both the integer and decimal portions of the number. For example, a D12.2 format is converted to A14. If the output format is not large enough, decimals are truncated."
	},
	"FUSEMENU": {
		"scope": "focexec",
		"prefix": "wff FUSEMENU",
		"body": [
			"FUSEMENU(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4})"
		],
		"description": "Dummy function"
	},
	"GEADMIN": {
		"scope": "focexec",
		"prefix": "wff GEADMIN",
		"body": [
			"GEADMIN(${1:output_format})"
		],
		"description": "Obtains effective server administrator"
	},
	"GETCOOKI": {
		"scope": "focexec",
		"prefix": "wff GETCOOKI",
		"body": [
			"GETCOOKI(${1:cookie_name}, ${2:output_format})"
		],
		"description": "Retrieve the value in the Cookie"
	},
	"GETENV": {
		"scope": "focexec",
		"prefix": "wff GETENV",
		"body": [
			"GETENV(${1:var_name})"
		],
		"description": "Environment variable, retrieve the value"
	},
	"GETFPATH": {
		"scope": "focexec",
		"prefix": "wff GETFPATH",
		"body": [
			"GETFPATH(${1:filename_length}, ${2:filename}, ${3:filetype_length}, ${4:filetype}, ${5:outlength}, ${6:output_format})"
		],
		"description": "Retrieves search path for a file"
	},
	"GETHEADR": {
		"scope": "focexec",
		"prefix": "wff GETHEADR",
		"body": [
			"GETHEADR(${1:header_name}, ${2:output_format})"
		],
		"description": "Retrieves HTTP header parameter"
	},
	"GETLICENSETOKEN": {
		"scope": "focexec",
		"prefix": "wff GETLICENSETOKEN",
		"body": [
			"GETLICENSETOKEN()"
		],
		"description": "Retrieve server license tokens"
	},
	"GETPDS": {
		"scope": "focexec",
		"prefix": "wff GETPDS",
		"body": [
			"GETPDS(${1:arg1}, ${2:arg2}, ${3:output_format})"
		],
		"description": "Determine if a PDS member exists"
	},
	"GETSTIME": {
		"scope": "focexec",
		"prefix": "wff GETSTIME",
		"body": [
			"GETSTIME(${1:output_format})"
		],
		"description": "Extract the current 64-bit DEC standard date from the system. OpenVMS server only."
	},
	"GETTOK": {
		"scope": "focexec",
		"prefix": "wff GETTOK",
		"body": [
			"GETTOK(${1:string}, ${2:length}, ${3:number}, '${4:delimiter}', ${5:outlength}, ${6:output_format})"
		],
		"description": "Extracts a token from a string. Use TOKEN instead."
	},
	"GETURL": {
		"scope": "focexec",
		"prefix": "wff GETURL",
		"body": [
			"GETURL(${1:outlength}, ${2:output_format})"
		],
		"description": "Retrieves URL"
	},
	"GETUSER": {
		"scope": "focexec",
		"prefix": "wff GETUSER",
		"body": [
			"GETUSER(${1:output_format})"
		],
		"description": "Retrieves the user ID running the data agent process"
	},
	"GIS_DISTANCE": {
		"scope": "focexec",
		"prefix": "wff GIS_DISTANCE",
		"body": [
			"GIS_DISTANCE(${1:geo_point1}, ${2:geo_point2})"
		],
		"description": "Uses GIS service to calculate distance between provided geometry points"
	},
	"GIS_DRIVE_ROUTE": {
		"scope": "focexec",
		"prefix": "wff GIS_DRIVE_ROUTE",
		"body": [
			"GIS_DRIVE_ROUTE(${1:geo_start_point}, ${2:geo_end_point})"
		],
		"description": "Uses GIS service to calculate driving route between provided geometry points"
	},
	"GIS_GEOCODE_ADDR": {
		"scope": "focexec",
		"prefix": "wff GIS_GEOCODE_ADDR",
		"body": [
			"GIS_GEOCODE_ADDR(${1:address}, ${2:country})"
		],
		"description": "Uses GIS geocoding service to obtain geometry point for provided complete address"
	},
	"GIS_GEOCODE_ADDR_CITY": {
		"scope": "focexec",
		"prefix": "wff GIS_GEOCODE_ADDR_CITY",
		"body": [
			"GIS_GEOCODE_ADDR_CITY(${1:street_address}, ${2:city}, ${3:state}, ${4:country})"
		],
		"description": "Uses GIS geocoding service to obtain geometry point for provided address line, city, state and country"
	},
	"GIS_GEOCODE_ADDR_POSTAL": {
		"scope": "focexec",
		"prefix": "wff GIS_GEOCODE_ADDR_POSTAL",
		"body": [
			"GIS_GEOCODE_ADDR_POSTAL(${1:street_address}, ${2:postal_code}, ${3:country})"
		],
		"description": "Uses GIS geocoding service to obtain geometry point for provided address line, postal code and country"
	},
	"GIS_GEOMETRY": {
		"scope": "focexec",
		"prefix": "wff GIS_GEOMETRY",
		"body": [
			"GIS_GEOMETRY(${1:geotype}, ${2:wkid}, ${3:geometry})"
		],
		"description": "Builds a JSON Geometry object with the provided geometry type, WKID and geometry"
	},
	"GIS_IN_POLYGON": {
		"scope": "focexec",
		"prefix": "wff GIS_IN_POLYGON",
		"body": [
			"GIS_IN_POLYGON(${1:point}, ${2:Polygon_definition})"
		],
		"description": "Determines whether a point is inside a complex polygon."
	},
	"GIS_LINE": {
		"scope": "focexec",
		"prefix": "wff GIS_LINE",
		"body": [
			"GIS_LINE(${1:geometry1}, ${2:geometry2})"
		],
		"description": "Builds a JSON line defining Geometry object with the provided point or line"
	},
	"GIS_POINT": {
		"scope": "focexec",
		"prefix": "wff GIS_POINT",
		"body": [
			"GIS_POINT(${1:wkid}, ${2:longitude}, ${3:latitude})"
		],
		"description": "Builds a JSON point defining Geometry object with the provided WKID, longitude and latitude"
	},
	"GIS_SERV_AREA_XY": {
		"scope": "focexec",
		"prefix": "wff GIS_SERV_AREA_XY",
		"body": [
			"GIS_SERV_AREA_XY(${1:longitude}, ${2:latitude}, ${3:distance}, ${4:travel_mode[}, ${5:wkid]})"
		],
		"description": "Uses GIS service to calculate geometry area with access boundaries within the given time/distance from the provided coordinate"
	},
	"GIS_SERVICE_AREA": {
		"scope": "focexec",
		"prefix": "wff GIS_SERVICE_AREA",
		"body": [
			"GIS_SERVICE_AREA(${1:geo_point}, ${2:distance}, ${3:travel_mode})"
		],
		"description": "Uses GIS service to calculate geometry area with access boundaries within the given time/distance from the provided geometry point"
	},
	"GRECTYPE": {
		"scope": "focexec",
		"prefix": "wff GRECTYPE",
		"body": [
			"GRECTYPE(${1:output_format})"
		],
		"description": "Determines last record type of IDoc record: EDI_DC40.Tabnam or EDI_DD40.Segnam"
	},
	"GREGDT": {
		"scope": "focexec",
		"prefix": "wff GREGDT",
		"body": [
			"GREGDT(${1:indate}, ${2:output_format})"
		],
		"description": "Converts from Julian to Gregorian format"
	},
	"GREGDTI": {
		"scope": "focexec",
		"prefix": "wff GREGDTI",
		"body": [
			"GREGDTI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts from Julian to Gregorian format"
	},
	"GRPLIST": {
		"scope": "focexec",
		"prefix": "wff GRPLIST",
		"body": [
			"GRPLIST(${1:outlength}, ${2:output_format})"
		],
		"description": "Retrieves group list for a connected user"
	},
	"GTOD": {
		"scope": "focexec",
		"prefix": "wff GTOD",
		"body": [
			"GTOD(${1:arg1}, ${2:arg2})"
		],
		"description": "Calls CVT$CONVERT_FLOAT to convert VAX G Floating point data to VAX D Floating point data"
	},
	"HADD": {
		"scope": "focexec",
		"prefix": "wff HADD",
		"body": [
			"HADD(${1:datetime}, '${2:component}', ${3:increment}, ${4:length}, ${5:output_format})"
		],
		"description": "Increment a date-time value. Use DTADD instead."
	},
	"HCNVRT": {
		"scope": "focexec",
		"prefix": "wff HCNVRT",
		"body": [
			"HCNVRT(${1:datetime})"
		],
		"description": "Converts a date-time value to alpha format"
	},
	"HDATE": {
		"scope": "focexec",
		"prefix": "wff HDATE",
		"body": [
			"HDATE(${1:datetime}, ${2:output_format})"
		],
		"description": "Converts the date portion of a date-time value to a date format"
	},
	"HDIFF": {
		"scope": "focexec",
		"prefix": "wff HDIFF",
		"body": [
			"HDIFF(${1:end_datetime}, ${2:start_datetime}, '${3:component}', ${4:output_format})"
		],
		"description": "Find the number of units between two date-time values. Use DTDIFF instead."
	},
	"HDTTM": {
		"scope": "focexec",
		"prefix": "wff HDTTM",
		"body": [
			"HDTTM(${1:date}, ${2:length}, ${3:output_format})"
		],
		"description": "Converts a date to a date-time value"
	},
	"HEXBYT": {
		"scope": "focexec",
		"prefix": "wff HEXBYT",
		"body": [
			"HEXBYT(${1:decimal}, ${2:output_format})"
		],
		"description": "Converts a decimal value to a character"
	},
	"HEXTR": {
		"scope": "focexec",
		"prefix": "wff HEXTR",
		"body": [
			"HEXTR(${1:source}, '${2:componentstring}', ${3:length}, ${4:output_format})"
		],
		"description": "Extracts multiple components from a date-time value"
	},
	"HEXTYPE": {
		"scope": "focexec",
		"prefix": "wff HEXTYPE",
		"body": [
			"HEXTYPE(${1:in_value})"
		],
		"description": "Return the hexadecimal view of input value."
	},
	"HGETC": {
		"scope": "focexec",
		"prefix": "wff HGETC",
		"body": [
			"HGETC(${1:length}, ${2:output_format})"
		],
		"description": "Store the current local date and time as a date-time value. Use DT_CURRENT_DATETIME instead."
	},
	"HGETZ": {
		"scope": "focexec",
		"prefix": "wff HGETZ",
		"body": [
			"HGETZ(${1:length}, ${2:output_format})"
		],
		"description": "Store the current universal date and time as a date-time value"
	},
	"HHMMSS": {
		"scope": "focexec",
		"prefix": "wff HHMMSS",
		"body": [
			"HHMMSS(${1:output_format})"
		],
		"description": "Retrieves the current time"
	},
	"HHMS": {
		"scope": "focexec",
		"prefix": "wff HHMS",
		"body": [
			"HHMS(${1:datetime}, ${2:length}, ${3:output_format})"
		],
		"description": "Converts a date-time value to a time value"
	},
	"HINPUT": {
		"scope": "focexec",
		"prefix": "wff HINPUT",
		"body": [
			"HINPUT(${1:source_length}, ${2:string}, ${3:datetime_length}, ${4:output_format})"
		],
		"description": "Converts a character string to a date-time value"
	},
	"HMASK": {
		"scope": "focexec",
		"prefix": "wff HMASK",
		"body": [
			"HMASK(${1:source}, '${2:componentstring}', ${3:input}, ${4:length}, ${5:output_format})"
		],
		"description": "Move multiple date-time components to a target date-time field"
	},
	"HMIDNT": {
		"scope": "focexec",
		"prefix": "wff HMIDNT",
		"body": [
			"HMIDNT(${1:datetime}, ${2:length}, ${3:output_format})"
		],
		"description": "Set the time portion of a date-time value to midnight"
	},
	"HNAME": {
		"scope": "focexec",
		"prefix": "wff HNAME",
		"body": [
			"HNAME(${1:datetime}, '${2:component}', ${3:output_format})"
		],
		"description": "Retrieves date or time component as character string"
	},
	"HPART": {
		"scope": "focexec",
		"prefix": "wff HPART",
		"body": [
			"HPART(${1:datetime}, '${2:component}', ${3:output_format})"
		],
		"description": "Retrieves date or time component as a numeric value. Use DTPART instead."
	},
	"HSETPT": {
		"scope": "focexec",
		"prefix": "wff HSETPT",
		"body": [
			"HSETPT(${1:datetime}, '${2:component}', ${3:value}, ${4:length}, ${5:output_format})"
		],
		"description": "Inserts a component into a date-time value"
	},
	"HTIME": {
		"scope": "focexec",
		"prefix": "wff HTIME",
		"body": [
			"HTIME(${1:length}, ${2:datetime}, ${3:output_format})"
		],
		"description": "Converts the time portion of a date-time value to a number"
	},
	"HTMTOTS": {
		"scope": "focexec",
		"prefix": "wff HTMTOTS",
		"body": [
			"HTMTOTS(${1:time}, ${2:length}, ${3:output_format})"
		],
		"description": "Converts a time to a date-time value"
	},
	"HYYWD": {
		"scope": "focexec",
		"prefix": "wff HYYWD",
		"body": [
			"HYYWD(${1:datetime}, ${2:output_format})"
		],
		"description": "Returns the year and week number from a date-time value"
	},
	"IF": {
		"scope": "focexec",
		"prefix": "wff IF",
		"body": [
			"IF(${1:cond1} THEN ${3:result1}, ${4:[ELSE IF]}, ${5:[condn]}, ${6:[THEN]}, ${7:[resultn]}, ${8:[ELSE]}, ${9:[else_exp]})"
		],
		"description": "The IF-THEN-ELSE expression evaluates a set of conditions to determine the result."
	},
	"IMOD": {
		"scope": "focexec",
		"prefix": "wff IMOD",
		"body": [
			"IMOD(${1:dividend}, ${2:divisor}, ${3:output_format})"
		],
		"description": "Calculates the remainder from a division as an integer. Use MOD instead."
	},
	"INT": {
		"scope": "focexec",
		"prefix": "wff INT",
		"body": [
			"INT(${1:number})"
		],
		"description": "Returns integer part of number"
	},
	"ISADMIN": {
		"scope": "focexec",
		"prefix": "wff ISADMIN",
		"body": [
			"ISADMIN(${1:output_format})"
		],
		"description": "Finds out if the user is a Server Administrator: 'Y' or 'N'"
	},
	"ITONUM": {
		"scope": "focexec",
		"prefix": "wff ITONUM",
		"body": [
			"ITONUM(${1:maxbytes}, ${2:infield}, '${3:output_format}')"
		],
		"description": "Converts a large number from integer to double-precision format"
	},
	"ITOPACK": {
		"scope": "focexec",
		"prefix": "wff ITOPACK",
		"body": [
			"ITOPACK(${1:maxbytes}, ${2:infield}, '${3:output_format}')"
		],
		"description": "Converts a large binary integer to packed-decimal format"
	},
	"ITOZ": {
		"scope": "focexec",
		"prefix": "wff ITOZ",
		"body": [
			"ITOZ(${1:length}, ${2:in_value}, ${3:output_format})"
		],
		"description": "Converts a number to zoned format"
	},
	"JOBNAME": {
		"scope": "focexec",
		"prefix": "wff JOBNAME",
		"body": [
			"JOBNAME(${1:outlength}, ${2:output_format})"
		],
		"description": "Get job name string (string representation of current process id)"
	},
	"JPTRANS": {
		"scope": "focexec",
		"prefix": "wff JPTRANS",
		"body": [
			"JPTRANS('${1:conversion_type}', ${2:length}, ${3:string}, ${4:output_format})"
		],
		"description": "Converts Japanese specific characters"
	},
	"JULDAT": {
		"scope": "focexec",
		"prefix": "wff JULDAT",
		"body": [
			"JULDAT(${1:indate}, ${2:output_format})"
		],
		"description": "Converts from Gregorian to Julian format"
	},
	"JULDATI": {
		"scope": "focexec",
		"prefix": "wff JULDATI",
		"body": [
			"JULDATI(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Converts from Gregorian to Julian format"
	},
	"KKFCUT": {
		"scope": "focexec",
		"prefix": "wff KKFCUT",
		"body": [
			"KKFCUT(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "DBCS string truncation"
	},
	"LAST": {
		"scope": "focexec",
		"prefix": "wff LAST",
		"body": [
			"LAST(${1:field})"
		],
		"description": "Retrieves the preceding value of a field. Use PARTITION_REF(field, TABLE, -1) instead."
	},
	"LAST_NONBLANK": {
		"scope": "focexec",
		"prefix": "wff LAST_NONBLANK",
		"body": [
			"LAST_NONBLANK(${1:field})"
		],
		"description": "Retrieve the last field value that is neither blank nor missing. If all previous values are either blank or missing, return missing value."
	},
	"LCWORD": {
		"scope": "focexec",
		"prefix": "wff LCWORD",
		"body": [
			"LCWORD(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Casing, convert text to mixed case. The only uppercased letters are the first letter of each word and the letter after single or double quote."
	},
	"LCWORD2": {
		"scope": "focexec",
		"prefix": "wff LCWORD2",
		"body": [
			"LCWORD2(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Casing, convert text to mixed case. The only uppercased letters are the first letter of each word and the letter after double quote."
	},
	"LCWORD3": {
		"scope": "focexec",
		"prefix": "wff LCWORD3",
		"body": [
			"LCWORD3(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Casing, convert text to mixed case. The only uppercased letter is the first letter of each word."
	},
	"LENV": {
		"scope": "focexec",
		"prefix": "wff LENV",
		"body": [
			"LENV(${1:string}, ${2:output_format})"
		],
		"description": "Returns the length of a character string, including trailing blanks. Use CHAR_LENGTH instead."
	},
	"LIEN": {
		"scope": "focexec",
		"prefix": "wff LIEN",
		"body": [
			"LIEN(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:output_format})"
		],
		"description": "License encoder"
	},
	"LIKE": {
		"scope": "focexec",
		"prefix": "wff LIKE",
		"body": [
			"LIKE()"
		],
		"description": "Selects records similar to a specified mask"
	},
	"LJUST": {
		"scope": "focexec",
		"prefix": "wff LJUST",
		"body": [
			"LJUST(${1:upper_limit}, ${2:string}, ${3:output_format})"
		],
		"description": "Alignment of a character string, left-justified. Use LTRIM instead."
	},
	"LOCASE": {
		"scope": "focexec",
		"prefix": "wff LOCASE",
		"body": [
			"LOCASE(${1:upper_limit}, ${2:string}, ${3:output_format})"
		],
		"description": "Returns the character string with all letters lowercase. Use LOWER instead."
	},
	"LOCASV": {
		"scope": "focexec",
		"prefix": "wff LOCASV",
		"body": [
			"LOCASV(${1:upper_limit}, ${2:string}, ${3:output_format})"
		],
		"description": "Returns the character string with all letters lowercase. Use LOWER instead."
	},
	"LOG": {
		"scope": "focexec",
		"prefix": "wff LOG",
		"body": [
			"LOG(${1:number})"
		],
		"description": "Calculates the natural logarithm"
	},
	"LOGOP": {
		"scope": "focexec",
		"prefix": "wff LOGOP",
		"body": [
			"LOGOP(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:output_format})"
		],
		"description": "Perform logical AND/OR between two integers"
	},
	"LOOKUP": {
		"scope": "focexec",
		"prefix": "wff LOOKUP",
		"body": [
			"LOOKUP(${1:field})"
		],
		"description": "Retrieves a value from a cross-referenced data source"
	},
	"LOWER": {
		"scope": "focexec",
		"prefix": "wff LOWER",
		"body": [
			"LOWER(${1:string})"
		],
		"description": "Returns the character string with all letters lowercase. The output data type is the same as the input data type."
	},
	"LPAD": {
		"scope": "focexec",
		"prefix": "wff LPAD",
		"body": [
			"LPAD(${1:string}, ${2:out_length}, ${3:pad_character})"
		],
		"description": "Returns the out_length characters long left-padded character_string. The output data type is the same as the input data type."
	},
	"LST.": {
		"scope": "focexec",
		"prefix": "wff LST.",
		"body": [
			"LST.${1:field}"
		],
		"description": "Generates the last physical instance of the field."
	},
	"LTRIM": {
		"scope": "focexec",
		"prefix": "wff LTRIM",
		"body": [
			"LTRIM(${1:string})"
		],
		"description": "Removes all blanks from the left end of character string."
	},
	"MAX": {
		"scope": "focexec",
		"prefix": "wff MAX",
		"body": [
			"MAX(${1:value1}, ${2:value2...})"
		],
		"description": "Find the maximum value"
	},
	"MAX.": {
		"scope": "focexec",
		"prefix": "wff MAX.",
		"body": [
			"MAX.${1:field}"
		],
		"description": "Generates the maximum value of the field."
	},
	"MDE.": {
		"scope": "focexec",
		"prefix": "wff MDE.",
		"body": [
			"MDE.${1:field}"
		],
		"description": "Computes the mode of the field values."
	},
	"MDN.": {
		"scope": "focexec",
		"prefix": "wff MDN.",
		"body": [
			"MDN.${1:field}"
		],
		"description": "Computes the median of the field values."
	},
	"MDY": {
		"scope": "focexec",
		"prefix": "wff MDY",
		"body": [
			"MDY(${1:from_date}, ${2:to_date})"
		],
		"description": "Calculates the difference between two dates in month-day-year format"
	},
	"MDYI": {
		"scope": "focexec",
		"prefix": "wff MDYI",
		"body": [
			"MDYI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4})"
		],
		"description": "Calculates the difference between two dates in month-day-year format"
	},
	"MIN": {
		"scope": "focexec",
		"prefix": "wff MIN",
		"body": [
			"MIN(${1:value1}, ${2:value2...})"
		],
		"description": "Find the minimum value"
	},
	"MIN.": {
		"scope": "focexec",
		"prefix": "wff MIN.",
		"body": [
			"MIN.${1:field}"
		],
		"description": "Generates the minimum value of the field."
	},
	"MIRR": {
		"scope": "focexec",
		"prefix": "wff MIRR",
		"body": [
			"MIRR(${1:cashflow}, ${2:finrate}, ${3:reinvrate}, ${4:output_format})"
		],
		"description": "Calculates the modified internal rate of return"
	},
	"MLTREGI": {
		"scope": "focexec",
		"prefix": "wff MLTREGI",
		"body": [
			"MLTREGI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9})"
		],
		"description": "Multi dimensional regression"
	},
	"MOD": {
		"scope": "focexec",
		"prefix": "wff MOD",
		"body": [
			"MOD(${1:dividend}, ${2:divisor})"
		],
		"description": "Calculates the remainder from a division. Returns dividend if divisor is 0. The output data type is the same as the input data type."
	},
	"MODFN2": {
		"scope": "focexec",
		"prefix": "wff MODFN2",
		"body": [
			"MODFN2(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Internal FIND implementation"
	},
	"MOVAVEI": {
		"scope": "focexec",
		"prefix": "wff MOVAVEI",
		"body": [
			"MOVAVEI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8})"
		],
		"description": "Compute projection values of sort key field provided based on moving average method"
	},
	"MSOINFO": {
		"scope": "focexec",
		"prefix": "wff MSOINFO",
		"body": [
			"MSOINFO(${1:arg1}, ${2:arg2})"
		],
		"description": ""
	},
	"MSOWRIT": {
		"scope": "focexec",
		"prefix": "wff MSOWRIT",
		"body": [
			"MSOWRIT(${1:file_name}, ${2:output_format})"
		],
		"description": "URL, write"
	},
	"MVSDYNAM": {
		"scope": "focexec",
		"prefix": "wff MVSDYNAM",
		"body": [
			"MVSDYNAM(${1:arg1}, ${2:arg2}, ${3:output_format})"
		],
		"description": "Pass a DYNAM command to the Command Processor"
	},
	"NORMSDST": {
		"scope": "focexec",
		"prefix": "wff NORMSDST",
		"body": [
			"NORMSDST(${1:value}, ${2:output_format})"
		],
		"description": "Calculates the cumulative standard normal distribution function"
	},
	"NORMSINV": {
		"scope": "focexec",
		"prefix": "wff NORMSINV",
		"body": [
			"NORMSINV(${1:value}, ${2:output_format})"
		],
		"description": "Calculates the inverse cumulative standard normal distribution function"
	},
	"OVRLAY": {
		"scope": "focexec",
		"prefix": "wff OVRLAY",
		"body": [
			"OVRLAY(${1:string}, ${2:length}, ${3:substring}, ${4:sublength}, ${5:position}, ${6:output_format})"
		],
		"description": "Overlay a character string."
	},
	"PARAG": {
		"scope": "focexec",
		"prefix": "wff PARAG",
		"body": [
			"PARAG(${1:length}, ${2:string}, '${3:delimiter}', ${4:max_token_size}, ${5:output_format})"
		],
		"description": "Text formatting, divide text into smaller lines"
	},
	"PARTITION_AGGR": {
		"scope": "focexec",
		"prefix": "wff PARTITION_AGGR",
		"body": [
			"PARTITION_AGGR(${1:aggregation.field}, ${2:reset_key|TABLE}, ${3:lower}, ${4:upper}, ${5:post_aggregation})"
		],
		"description": "Operations over groups of lines"
	},
	"PARTITION_REF": {
		"scope": "focexec",
		"prefix": "wff PARTITION_REF",
		"body": [
			"PARTITION_REF(${1:aggregation.field}, ${2:reset_key|TABLE}, - ${3:offset})"
		],
		"description": "Retrieves the preceding value of a field"
	},
	"PATTERN": {
		"scope": "focexec",
		"prefix": "wff PATTERN",
		"body": [
			"PATTERN(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Returns a character string that represents the pattern of the input"
	},
	"PCKOUT": {
		"scope": "focexec",
		"prefix": "wff PCKOUT",
		"body": [
			"PCKOUT(${1:in_value}, ${2:length}, ${3:output_format})"
		],
		"description": "Write a packed number of variable length"
	},
	"PCT.": {
		"scope": "focexec",
		"prefix": "wff PCT",
		"body": [
			"PCT.${1:field}"
		],
		"description": "Computes a field percentage based on the total values for the field."
	},
	"PCT.CNT.": {
		"scope": "focexec",
		"prefix": "wff PCT.CNT.",
		"body": [
			"PCT.CNT.${1:field}"
		],
		"description": "Computes a field percentage based on the number of instances found."
	},
	"PHONETIC": {
		"scope": "focexec",
		"prefix": "wff PHONETIC",
		"body": [
			"PHONETIC(${1:string})"
		],
		"description": "Returns phonetic key of the string on success, or a null key on failure. The keys vary in length."
	},
	"POSIT": {
		"scope": "focexec",
		"prefix": "wff POSIT",
		"body": [
			"POSIT(${1:string}, ${2:length}, ${3:substring}, ${4:sublength}, ${5:output_format})"
		],
		"description": "Returns the position of the first occurrence of a specified sample string in a source string. Use POSITION instead."
	},
	"POSITION": {
		"scope": "focexec",
		"prefix": "wff POSITION",
		"body": [
			"POSITION(${1:pattern}, ${2:string})"
		],
		"description": "Returns the position of the first occurrence of a specified sample string in a source string."
	},
	"POSITV": {
		"scope": "focexec",
		"prefix": "wff POSITV",
		"body": [
			"POSITV(${1:string}, ${2:upper_limit}, ${3:substring}, ${4:substring_limit}, ${5:output_format})"
		],
		"description": "Returns the position of the first occurrence of a specified sample string in a variable length source string. Use POSITION instead."
	},
	"POWER": {
		"scope": "focexec",
		"prefix": "wff POWER",
		"body": [
			"POWER(${1:base}, ${2:power})"
		],
		"description": "Returns the value of the specified numeric expression to the specified power."
	},
	"PRDNOR": {
		"scope": "focexec",
		"prefix": "wff PRDNOR",
		"body": [
			"PRDNOR(${1:seed}, ${2:output_format})"
		],
		"description": "Generate reproducible random numbers, normally distributed with an arithmetic mean of 0 and a standard deviation of 1"
	},
	"PRDUNI": {
		"scope": "focexec",
		"prefix": "wff PRDUNI",
		"body": [
			"PRDUNI(${1:seed}, ${2:output_format})"
		],
		"description": "Generate reproducible random numbers, uniformly distributed between 0 and 1"
	},
	"PTHDAT": {
		"scope": "focexec",
		"prefix": "wff PTHDAT",
		"body": [
			"PTHDAT(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Set ETL last command"
	},
	"PTOA": {
		"scope": "focexec",
		"prefix": "wff PTOA",
		"body": [
			"PTOA(${1:number}, '(${2:format})', '${3:output}')"
		],
		"description": "The PTOA function converts a number from numeric format to alphanumeric format. It retains the decimal positions of the number and right-justifies it with leading spaces. You can also add edit options to a number converted by PTOA."
	},
	"PUTCOOKI": {
		"scope": "focexec",
		"prefix": "wff PUTCOOKI",
		"body": [
			"PUTCOOKI(${1:cookie_name}, ${2:output_format})"
		],
		"description": "Sets the value in the Cookie"
	},
	"PUTDDREC": {
		"scope": "focexec",
		"prefix": "wff PUTDDREC",
		"body": [
			"PUTDDREC(${1:ddname}, ${2:dd_len}, ${3:record_string}, ${4:record_len}, ${5:output_format})"
		],
		"description": "Write a character string as a record in a sequential file"
	},
	"PUTENV": {
		"scope": "focexec",
		"prefix": "wff PUTENV",
		"body": [
			"PUTENV(${1:var_name}, ${2:var_value})"
		],
		"description": "Environment variable, assign the value"
	},
	"RDNORM": {
		"scope": "focexec",
		"prefix": "wff RDNORM",
		"body": [
			"RDNORM(${1:output_format})"
		],
		"description": "Generate random numbers, normally distributed with an arithmetic mean of 0 and a standard deviation of 1"
	},
	"RDUNIF": {
		"scope": "focexec",
		"prefix": "wff RDUNIF",
		"body": [
			"RDUNIF(${1:output_format})"
		],
		"description": "Generate random numbers, uniformly distributed between 0 and 1"
	},
	"REGEX": {
		"scope": "focexec",
		"prefix": "wff REGEX",
		"body": [
			"REGEX(${1:string}, ${2:regular_expression})"
		],
		"description": "Performs regular expression matching (compared with the simple pattern matching performed by LIKE). This condition evaluates input strings using the regular expression specified in the second parameter."
	},
	"REGEXI": {
		"scope": "focexec",
		"prefix": "wff REGEXI",
		"body": [
			"REGEXI(${1:hidden_static_const}, ${2:string}, ${3:regular_expression})"
		],
		"description": "Performs regular expression matching (compared with the simple pattern matching performed by LIKE). This condition evaluates input strings using the regular expression specified in the second parameter."
	},
	"REGRESS": {
		"scope": "focexec",
		"prefix": "wff REGRESS",
		"body": [
			"REGRESS(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Compute values of sort key field provided based upon regression analysis"
	},
	"REGRESSI": {
		"scope": "focexec",
		"prefix": "wff REGRESSI",
		"body": [
			"REGRESSI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7})"
		],
		"description": "Compute values of sort key field provided based upon regression analysis"
	},
	"REPLACE": {
		"scope": "focexec",
		"prefix": "wff REPLACE",
		"body": [
			"REPLACE(${1:string}, ${2:pattern}, ${3:replacement})"
		],
		"description": "Text modification. Replaces all instances of a pattern in an input string with the given replacement pattern, including a null replacement string."
	},
	"REVERSE": {
		"scope": "focexec",
		"prefix": "wff REVERSE",
		"body": [
			"REVERSE(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Reverse a character string"
	},
	"RJUST": {
		"scope": "focexec",
		"prefix": "wff RJUST",
		"body": [
			"RJUST(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Alignment of a character string, right-justified. Use combination of LPAD and RTRIM instead."
	},
	"RNDSMPSZ": {
		"scope": "focexec",
		"prefix": "wff RNDSMPSZ",
		"body": [
			"RNDSMPSZ(${1:margin}, ${2:confidence}, ${3:errorrate}, ${4:population}, ${5:output_format})"
		],
		"description": "Random sampling"
	},
	"RPAD": {
		"scope": "focexec",
		"prefix": "wff RPAD",
		"body": [
			"RPAD(${1:string}, ${2:out_length}, ${3:pad_character})"
		],
		"description": "Returns the out_length characters long right-padded character_string. The output data type is the same as the input data type."
	},
	"RTCIVP": {
		"scope": "focexec",
		"prefix": "wff RTCIVP",
		"body": [
			"RTCIVP(${1:arg1}, ${2:arg2}, ${3:output_format})"
		],
		"description": "Sum numbers in the source_string after 'A'"
	},
	"RTRIM": {
		"scope": "focexec",
		"prefix": "wff RTRIM",
		"body": [
			"RTRIM(${1:string})"
		],
		"description": "Removes all blanks from the right end of character string."
	},
	"SESSID": {
		"scope": "focexec",
		"prefix": "wff SESSID",
		"body": [
			"SESSID(${1:output_format})"
		],
		"description": "Get session id from NWH context."
	},
	"SETAUTH": {
		"scope": "focexec",
		"prefix": "wff SETAUTH",
		"body": [
			"SETAUTH(${1:error_code}, ${2:outlength}, ${3:output_format})"
		],
		"description": "Set authentication code and primary group"
	},
	"SFTDEL": {
		"scope": "focexec",
		"prefix": "wff SFTDEL",
		"body": [
			"SFTDEL(${1:string}, ${2:length}, ${3:output_format})"
		],
		"description": "Deletes the shift code from the DBCS data."
	},
	"SFTINS": {
		"scope": "focexec",
		"prefix": "wff SFTINS",
		"body": [
			"SFTINS(${1:string}, ${2:length}, ${3:output_format})"
		],
		"description": "Adds the shift code to the DBCS data."
	},
	"SHORTMFD": {
		"scope": "focexec",
		"prefix": "wff SHORTMFD",
		"body": [
			"SHORTMFD(${1:arg1}, ${2:arg2}, ${3:output_format})"
		],
		"description": "Get short MFD name"
	},
	"SLEEP": {
		"scope": "focexec",
		"prefix": "wff SLEEP",
		"body": [
			"SLEEP(${1:delay}, ${2:output_format})"
		],
		"description": "Suspend execution for a specified number of seconds"
	},
	"SOUNDEX": {
		"scope": "focexec",
		"prefix": "wff SOUNDEX",
		"body": [
			"SOUNDEX(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Compares character strings phonetically"
	},
	"SPAWN": {
		"scope": "focexec",
		"prefix": "wff SPAWN",
		"body": [
			"SPAWN(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Create a subprocess from a procedure"
	},
	"SPELLNM": {
		"scope": "focexec",
		"prefix": "wff SPELLNM",
		"body": [
			"SPELLNM(${1:outlength}, ${2:number}, ${3:output_format})"
		],
		"description": "Spells out a dollar amount"
	},
	"SPLIT": {
		"scope": "focexec",
		"prefix": "wff SPLIT",
		"body": [
			"SPLIT(${1:part}, ${2:string})"
		],
		"description": "Retrieves a part from a string"
	},
	"SPLITI": {
		"scope": "focexec",
		"prefix": "wff SPLITI",
		"body": [
			"SPLITI(${1:part}, ${2:string})"
		],
		"description": "Internal for SPLIT."
	},
	"SQRT": {
		"scope": "focexec",
		"prefix": "wff SQRT",
		"body": [
			"SQRT(${1:number})"
		],
		"description": "Calculates the square root"
	},
	"SQUEEZ": {
		"scope": "focexec",
		"prefix": "wff SQUEEZ",
		"body": [
			"SQUEEZ(${1:length}, ${2:string}, ${3:output_format})"
		],
		"description": "Text formatting, reduce multiple spaces to a single space"
	},
	"STRIP": {
		"scope": "focexec",
		"prefix": "wff STRIP",
		"body": [
			"STRIP(${1:length}, ${2:string}, ${3:char}, ${4:output_format})"
		],
		"description": "Removes a character from a string. Use REPLACE instead."
	},
	"STRREP": {
		"scope": "focexec",
		"prefix": "wff STRREP",
		"body": [
			"STRREP(${1:inlength}, ${2:instring}, ${3:searchlength}, ${4:searchstring}, ${5:replength}, ${6:repstring}, ${7:outlength}, ${8:output_format})"
		],
		"description": "Text modification, replace character strings. Use REPLACE instead."
	},
	"STRTSMPL": {
		"scope": "focexec",
		"prefix": "wff STRTSMPL",
		"body": [
			"STRTSMPL(${1:margin}, ${2:confidence}, ${3:errorrates}, ${4:populations}, ${5:output_format})"
		],
		"description": "Stratified sampling"
	},
	"SUBSTR": {
		"scope": "focexec",
		"prefix": "wff SUBSTR",
		"body": [
			"SUBSTR(${1:upper_limit}, ${2:string}, ${3:position}, ${4:end_position}, ${5:substring_limit}, ${6:output_format})"
		],
		"description": "Extracts a substring from a source character string. Use SUBSTRING instead."
	},
	"SUBSTRING": {
		"scope": "focexec",
		"prefix": "wff SUBSTRING",
		"body": [
			"SUBSTRING(${1:string}, ${2:position}, ${3:length})"
		],
		"description": "Extracts a substring from a source character string."
	},
	"SUBSTV": {
		"scope": "focexec",
		"prefix": "wff SUBSTV",
		"body": [
			"SUBSTV(${1:upper_limit}, ${2:string}, ${3:position}, ${4:substring_limit}, ${5:output_format})"
		],
		"description": "Extracts a substring from a source variable length character string. Use SUBSTRING instead."
	},
	"SUM.": {
		"scope": "focexec",
		"prefix": "wff SUM.",
		"body": [
			"SUM.${1:field}"
		],
		"description": "Sums the field values."
	},
	"SUM.DST.": {
		"scope": "focexec",
		"prefix": "wff SUM.DST.",
		"body": [
			"SUM.DST.${1:field}"
		],
		"description": "Sums the field distinct values."
	},
	"SYSTEM": {
		"scope": "focexec",
		"prefix": "wff SYSTEM",
		"body": [
			"SYSTEM(${1:arg1}, ${2:arg2}, ${3:output_format})"
		],
		"description": "Calling a system program"
	},
	"SYSVAR": {
		"scope": "focexec",
		"prefix": "wff SYSVAR",
		"body": [
			"SYSVAR(${1:arg1}, ${2:arg2}, ${3:output_format})"
		],
		"description": "Read z/OS system variables"
	},
	"TEMPPATH": {
		"scope": "focexec",
		"prefix": "wff TEMPPATH",
		"body": [
			"TEMPPATH(${1:outlength}, ${2:output_format})"
		],
		"description": "Retrieves the physical directory name of the current agent process."
	},
	"TEXPAVEI": {
		"scope": "focexec",
		"prefix": "wff TEXPAVEI",
		"body": [
			"TEXPAVEI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5}, ${6:arg6}, ${7:arg7}, ${8:arg8}, ${9:arg9}, ${10:})"
		],
		"description": "Computes projection values of sort key field provided based on triple exponential average method"
	},
	"TO_INTEGER": {
		"scope": "focexec",
		"prefix": "wff TO_INTEGER",
		"body": [
			"TO_INTEGER(${1:string})"
		],
		"description": "Convert a string to an integer value."
	},
	"TO_NUMBER": {
		"scope": "focexec",
		"prefix": "wff TO_NUMBER",
		"body": [
			"TO_NUMBER(${1:string})"
		],
		"description": "Convert a string into the numeric format most appropriate to the context."
	},
	"TODAY": {
		"scope": "focexec",
		"prefix": "wff TODAY",
		"body": [
			"TODAY(${1:output_format})"
		],
		"description": "Returns the current date"
	},
	"TODAYI": {
		"scope": "focexec",
		"prefix": "wff TODAYI",
		"body": [
			"TODAYI(${1:arg1}, ${2:arg2})"
		],
		"description": "Returns the current date"
	},
	"TOKEN": {
		"scope": "focexec",
		"prefix": "wff TOKEN",
		"body": [
			"TOKEN(${1:string}, ${2:delimiter}, ${3:number})"
		],
		"description": "Extracts a token from a string."
	},
	"TRIM": {
		"scope": "focexec",
		"prefix": "wff TRIM",
		"body": [
			"TRIM(${1:trim_where}, ${2:string}, ${3:upper_limit}, ${4:pattern_string}, ${5:pattern_size_limit}, ${6:output_format})"
		],
		"description": "Removes leading characters, trailing characters, or both from a character string. Use TRIM_ instead."
	},
	"TRIM_": {
		"scope": "focexec",
		"prefix": "wff TRIM_",
		"body": [
			"TRIM_(${1:where}, ${2:pattern}, ${3:string})"
		],
		"description": "Removes leading characters, trailing characters, or both from a character string."
	},
	"TRIMV": {
		"scope": "focexec",
		"prefix": "wff TRIMV",
		"body": [
			"TRIMV(${1:trim_where}, ${2:string}, ${3:upper_limit}, ${4:pattern}, ${5:pattern_limit}, ${6:output_format})"
		],
		"description": "Removes leading characters, trailing characters, or both from a variable length character string. Use TRIM_ instead."
	},
	"TSCOMID": {
		"scope": "focexec",
		"prefix": "wff TSCOMID",
		"body": [
			"TSCOMID(${1:output_format})"
		],
		"description": "Get tscom id from NWH context"
	},
	"TSTOPACK": {
		"scope": "focexec",
		"prefix": "wff TSTOPACK",
		"body": [
			"TSTOPACK(${1:input_MS_timestamp}, ${2:output_format})"
		],
		"description": "Converts a MS timestamp in hex notation to packed-decimal format"
	},
	"UFMT": {
		"scope": "focexec",
		"prefix": "wff UFMT",
		"body": [
			"UFMT(${1:in_value}, ${2:in_limit}, ${3:output_format})"
		],
		"description": "Return the hexadecimal view of input value. For numeric values, the output depends on byte allocation for the given data type on the running platform."
	},
	"UPCASE": {
		"scope": "focexec",
		"prefix": "wff UPCASE",
		"body": [
			"UPCASE(${1:upper_limit}, ${2:string}, ${3:output_format})"
		],
		"description": "Returns the character string with all letters uppercase. Use UPPER instead."
	},
	"UPCASV": {
		"scope": "focexec",
		"prefix": "wff UPCASV",
		"body": [
			"UPCASV(${1:upper_limit}, ${2:string}, ${3:output_format})"
		],
		"description": "Returns the character string with all letters uppercase. Use UPPER instead."
	},
	"UPPER": {
		"scope": "focexec",
		"prefix": "wff UPPER",
		"body": [
			"UPPER(${1:string})"
		],
		"description": "Returns the character string with all letters uppercase. The output data type is the same as the input data type."
	},
	"USERPATH": {
		"scope": "focexec",
		"prefix": "wff USERPATH",
		"body": [
			"USERPATH(${1:outlength}, ${2:output_format})"
		],
		"description": "Get the value of the EDAPATH"
	},
	"WINOPEN": {
		"scope": "focexec",
		"prefix": "wff WINOPEN",
		"body": [
			"WINOPEN(${1:arg1}, ${2:arg2}, ${3:arg3})"
		],
		"description": "Dummy function"
	},
	"WRTSTIME": {
		"scope": "focexec",
		"prefix": "wff WRTSTIME",
		"body": [
			"WRTSTIME(${1:format_style}, ${2:in_field}, ${3:output_format})"
		],
		"description": "Convert the current date and time given in one of five input formats into a 8-byte standard DEC date and time format. OpenVMS server only."
	},
	"XIRR": {
		"scope": "focexec",
		"prefix": "wff XIRR",
		"body": [
			"XIRR(${1:cashflow}, ${2:dates}, ${3:guess}, ${4:maxiterations}, ${5:output_format})"
		],
		"description": "Calculates the internal rate of return"
	},
	"XMLDECOD": {
		"scope": "focexec",
		"prefix": "wff XMLDECOD",
		"body": [
			"XMLDECOD(${1:inlength}, ${2:instring}, ${3:outlength}, ${4:output_format})"
		],
		"description": "Decodes string with XML characters"
	},
	"XMLENCOD": {
		"scope": "focexec",
		"prefix": "wff XMLENCOD",
		"body": [
			"XMLENCOD(${1:inlength}, ${2:instring}, ${3:opcode}, ${4:outlength}, ${5:output_format})"
		],
		"description": "Encodes string with XML characters"
	},
	"XTPACK": {
		"scope": "focexec",
		"prefix": "wff XTPACK",
		"body": [
			"XTPACK(${1:infield}, ${2:outlength}, ${3:outdec}, ${4:output_format})"
		],
		"description": "Store packed values in an alpha field"
	},
	"YM": {
		"scope": "focexec",
		"prefix": "wff YM",
		"body": [
			"YM(${1:from_date}, ${2:to_date}, ${3:output_format})"
		],
		"description": "Calculates elapsed months"
	},
	"YMD": {
		"scope": "focexec",
		"prefix": "wff YMD",
		"body": [
			"YMD(${1:from_date}, ${2:to_date})"
		],
		"description": "Calculates the difference between two dates in year-month-day format"
	},
	"YMDI": {
		"scope": "focexec",
		"prefix": "wff YMDI",
		"body": [
			"YMDI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4})"
		],
		"description": "Calculates the difference between two dates in year-month-day format"
	},
	"YMI": {
		"scope": "focexec",
		"prefix": "wff YMI",
		"body": [
			"YMI(${1:arg1}, ${2:arg2}, ${3:arg3}, ${4:arg4})"
		],
		"description": "Calculates elapsed months"
	}
}